package main

import (
	"github.com/Spok95/telegram-school-bot/internal/bot/handlers"
	"github.com/Spok95/telegram-school-bot/internal/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"log"
	"os"
	"strings"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if err := godotenv.Load(); err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	botToken := os.Getenv("BOT_TOKEN")
	if botToken == "" {
		log.Fatal("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: %v", err)
	}
	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —á–µ—Ä–µ–∑ db.Init()
	database, err := db.Init()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer database.Close()

	if err := db.Migrate(database); err != nil {
		log.Fatal("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
	for update := range updates {
		if update.CallbackQuery != nil {
			if strings.HasPrefix(update.CallbackQuery.Data, "addscore_student_") ||
				strings.HasPrefix(update.CallbackQuery.Data, "addscore_category_") {
				handlers.HandleAddScoreCallback(bot, database, update.CallbackQuery)
				continue
			}
			handlers.HandleRoleCallback(bot, database, update.CallbackQuery)
			handlers.HandlePendingRoleCallback(bot, database, update.CallbackQuery)
			continue
		}
		if update.Message == nil {
			continue
		}

		switch update.Message.Text {
		case "/start":
			handlers.HandleStart(bot, database, update.Message)
		case "/setrole":
			handlers.HandleSetRoleRequest(bot, database, update.Message)
		case "/pending_roles":
			handlers.HandlePendingRoles(bot, database, update.Message)
		case "/addscore", "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã":
			go handlers.HandleAddScore(bot, database, update.Message)
		case "/myscore", "üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥":
			handlers.HandleMyScore(bot, database, update.Message)
		case "üìä –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–±—ë–Ω–∫–∞":
			handlers.HandleMyScore(bot, database, update.Message)
		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
			bot.Send(msg)
		}
	}
}
