services:
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: school
      POSTGRES_USER: school
      POSTGRES_PASSWORD: schoolpass
      TZ: Europe/Moscow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U school -d school"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: ./Dockerfile
      args: # ← НОВОЕ
        VERSION: ${GIT_VERSION:-dev}
        COMMIT: ${GIT_COMMIT:-none}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://school:schoolpass@postgres:5432/school?sslmode=disable
      BOT_TOKEN: ${BOT_TOKEN}
      ADMIN_IDS: ${ADMIN_IDS}
      TZ: Europe/Moscow
      HTTP_ADDR: ":8080"
      LOG_LEVEL: "info"     # или "debug"
      ENV: "prod"           # dev|prod
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "8080:8080"         # /healthz и /metrics
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
  prometheus:
    image: prom/prometheus:v2.54.1
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prom_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - bot

volumes:
  db_data: {}
  prom_data: {}