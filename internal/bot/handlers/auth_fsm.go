package handlers

import (
	"database/sql"
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strings"
	"sync"
	"time"
)

type AuthState string

const (
	AuthStateStart       AuthState = "start"
	AuthStateFIO         AuthState = "fio"
	AuthStateRole        AuthState = "role"
	AuthStateClass       AuthState = "class"
	AuthStateChild       AuthState = "child"
	AuthStateWaitConfirm AuthState = "wait_confirm"
	AuthStateDone        AuthState = "done"
)

type AuthSession struct {
	TelegramID  int64
	State       AuthState
	FIO         string
	Role        string
	Class       string
	ChildFIO    string
	RequestedAt time.Time
}

var authFSM sync.Map

// –ó–∞–ø—É—Å–∫ FSM
func StartFSM(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	session := &AuthSession{
		TelegramID:  msg.From.ID,
		State:       AuthStateFIO,
		RequestedAt: time.Now(),
	}
	authFSM.Store(msg.From.ID, session)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"))
}

// FSM-—à–∞–≥: –§–ò–û

func HandleFIO(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	val, ok := authFSM.Load(msg.From.ID)
	if !ok {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ."))
		return
	}
	session := val.(*AuthSession)
	session.FIO = msg.Text
	session.State = AuthStateRole
	authFSM.Store(msg.From.ID, session)
	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–æ–ª–µ–π
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–£—á–µ–Ω–∏–∫", "role_student"),
			tgbotapi.NewInlineKeyboardButtonData("–†–æ–¥–∏—Ç–µ–ª—å", "role_parent"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–£—á–∏—Ç–µ–ª—å", "role_teacher"),
		),
	)
	msgOut := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:")
	msgOut.ReplyMarkup = buttons
	bot.Send(msgOut)
}

// FSM-—à–∞–≥: ROLE (–æ–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫)
func HandleRoleInline(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	session, ok := AuthFSMGetSession(cb.From.ID)
	if !ok {
		return
	}
	data := cb.Data
	var role string
	switch data {
	case "role_student":
		role = "student"
	case "role_parent":
		role = "parent"
	case "role_teacher":
		role = "teacher"
	default:
		return
	}
	session.Role = role
	switch role {
	case "student":
		session.State = AuthStateClass
		authFSM.Store(cb.From.ID, session)
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7–ê):"))
	case "parent":
		session.State = AuthStateChild
		authFSM.Store(cb.From.ID, session)
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –§–ò–û –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7–ë –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"))
	default:
		session.State = AuthStateWaitConfirm
		authFSM.Store(cb.From.ID, session)
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"))
	}
	bot.Request(tgbotapi.NewCallback(cb.ID, "–í—ã–±—Ä–∞–Ω–æ: "+role))
}

// FSM-—à–∞–≥: CLASS –∏ CHILD ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func HandleClass(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	val, ok := authFSM.Load(msg.From.ID)
	if !ok {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ."))
		return
	}
	session := val.(*AuthSession)
	session.Class = msg.Text
	session.State = AuthStateWaitConfirm
	authFSM.Store(msg.From.ID, session)

	err := db.UpdateUserPendingApplication(database,
		session.TelegramID,
		session.Role,
		session.FIO,
		session.Class,
		"",
	)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}
	NotifyAdminOfPendingRole(bot, database, session.TelegramID, session.FIO, session.Role, session.Class, "")
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"))
}

func HandleChild(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	val, ok := authFSM.Load(msg.From.ID)
	if !ok {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ."))
		return
	}
	session := val.(*AuthSession)
	parts := strings.SplitN(msg.Text, " ", 2)
	if len(parts) != 2 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7–ë –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)"))
		return
	}
	session.Class = parts[0]
	session.ChildFIO = parts[1]
	session.State = AuthStateWaitConfirm
	authFSM.Store(msg.From.ID, session)
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := db.UpdateUserPendingApplication(database,
		session.TelegramID,
		session.Role,
		session.FIO,
		session.Class,
		session.ChildFIO,
	)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}
	NotifyAdminOfPendingRole(bot, database, session.TelegramID, session.FIO, session.Role, session.Class, session.ChildFIO)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"))
}

// –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ ID
func AuthFSMGetSession(userID int64) (*AuthSession, bool) {
	val, ok := authFSM.Load(userID)
	if !ok {
		return nil, false
	}
	return val.(*AuthSession), true
}

func AuthFSMDeleteSession(userID int64) {
	authFSM.Delete(userID)
}

func NotifyAdminOfPendingRole(bot *tgbotapi.BotAPI, database *sql.DB, telegramID int64, fio, role, class, childFio string) {
	rows, err := database.Query(`SELECT telegram_id FROM users WHERE role = 'admin' AND is_active = 1`)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var adminID int64
		if err := rows.Scan(&adminID); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ adminID:", err)
			continue
		}
		text := fmt.Sprintf("üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n–§–ò–û: %s\n–†–æ–ª—å: %s\n–ö–ª–∞—Å—Å: %s\n–†–µ–±—ë–Ω–æ–∫: %s", fio, role, class, childFio)
		msg := tgbotapi.NewMessage(adminID, text)
		msg.ParseMode = "Markdown"
		buttons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("approve_%d_%s", telegramID, role)),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", telegramID)),
			),
		)
		msg.ReplyMarkup = buttons
		bot.Send(msg)
	}
}
