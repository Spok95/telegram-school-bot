package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/bot/shared/fsmutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ShowPendingScores –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å status = 'pending'
func ShowPendingScores(bot *tgbotapi.BotAPI, database *sql.DB, adminID int64) {
	// –∑–∞–ø—Ä–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
	admin, err := db.GetUserByID(database, adminID)
	if err == nil {
		if !fsmutil.MustBeActiveForOps(&admin) {
			if _, err := bot.Send(tgbotapi.NewMessage(adminID, "üö´ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
	}
	scores, err := db.GetPendingScores(database)
	if err != nil {
		log.Println("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–∞–ª–ª—ã:", err)
		if _, err := bot.Send(tgbotapi.NewMessage(adminID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–∞–ª–ª—ã.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	if len(scores) == 0 {
		if _, err := bot.Send(tgbotapi.NewMessage(adminID, "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}

	for _, s := range scores {
		student, err1 := db.GetUserByID(database, s.StudentID)
		creator, err2 := db.GetUserByID(database, s.CreatedBy)

		if err1 != nil || err2 != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err1, err2)
			continue
		}
		comment := "(–Ω–µ—Ç)"
		if s.Comment != nil && *s.Comment != "" {
			comment = *s.Comment
		}
		class := fmt.Sprintf("%d%s", *student.ClassNumber, *student.ClassLetter)
		text := fmt.Sprintf("–ó–∞—è–≤–∫–∞ –æ—Ç %s\nüë§ –£—á–µ–Ω–∏–∫: %s\nüè´ –ö–ª–∞—Å—Å: %s\nüìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüíØ –ë–∞–ª–ª—ã: %d (%s)\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s",
			creator.Name, student.Name, class, s.CategoryLabel, s.Points, s.Type, comment)

		approveBtn := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("score_confirm_%d", s.ID))
		rejectBtn := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("score_reject_%d", s.ID))
		markup := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(approveBtn, rejectBtn))

		msg := tgbotapi.NewMessage(adminID, text)
		msg.ReplyMarkup = markup
		if _, err := bot.Send(msg); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}
	delete(notifiedAdmins, adminID)
}

// HandleScoreApprovalCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
func HandleScoreApprovalCallback(callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI, database *sql.DB, userID int64) {
	data := callback.Data
	var action, idStr string

	switch {
	case strings.HasPrefix(data, "score_confirm_"):
		action = "approve"
		idStr = strings.TrimPrefix(data, "score_confirm_")
	case strings.HasPrefix(data, "score_reject_"):
		action = "reject"
		idStr = strings.TrimPrefix(data, "score_reject_")
	default:
		return
	}
	scoreID, err := strconv.ParseInt(idStr, 10, 64)
	if err != nil {
		log.Println("–Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏:", err)
		return
	}

	chatID := callback.Message.Chat.ID
	messageID := callback.Message.MessageID
	user, _ := db.GetUserByTelegramID(database, userID)

	var resultText string
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
	currentStatus, err := db.GetScoreStatusByID(database, scoreID)
	switch {
	case err != nil:
		log.Println("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:", err)
		resultText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏."
	case currentStatus != "pending":
		resultText = "‚è≥ –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–∞–Ω–µ–µ."
	case action == "approve":
		err = db.ApproveScore(database, scoreID, user.ID, time.Now())
		if err == nil {
			resultText = fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: @%s", user.Name)
		} else {
			log.Println("–æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", err)
			resultText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."
		}
	default:
		err = db.RejectScore(database, scoreID, user.ID, time.Now())
		if err == nil {
			resultText = fmt.Sprintf("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–û—Ç–∫–ª–æ–Ω–∏–ª: @%s", user.Name)
		} else {
			log.Println("–æ—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", err)
			resultText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."
		}
	}

	edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, resultText, tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{},
	})
	if _, err := bot.Send(edit); err != nil {
		metrics.HandlerErrors.Inc()
	}

	if _, err := bot.Request(tgbotapi.NewCallback(callback.ID, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")); err != nil {
		metrics.HandlerErrors.Inc()
	}
}
