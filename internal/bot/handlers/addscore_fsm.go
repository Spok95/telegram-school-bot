package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/bot/shared/fsmutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type AddFSMState struct {
	Step               int
	ClassNumber        int64
	ClassLetter        string
	SelectedStudentIDs []int64
	CategoryID         int
	LevelID            int
	Comment            string
}

var addStates = make(map[int64]*AddFSMState)

// ==== helpers ====

func addBackCancelRow() []tgbotapi.InlineKeyboardButton {
	row := fsmutil.BackCancelRow("add_back", "add_cancel")
	return row
}

func addEditMenu(bot *tgbotapi.BotAPI, chatID int64, messageID int, text string, rows [][]tgbotapi.InlineKeyboardButton) {
	cfg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
	cfg.ReplyMarkup = &mk
	bot.Send(cfg)
}

func addClassNumberRows() [][]tgbotapi.InlineKeyboardButton {
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, num := range []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} {
		callback := fmt.Sprintf("add_class_num_%d", num)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%d –∫–ª–∞—Å—Å", num), callback),
		))
	}
	buttons = append(buttons, addBackCancelRow())
	return buttons
}

func addClassLetterRows(prefix string) [][]tgbotapi.InlineKeyboardButton {
	letters := []string{"–ê", "–ë", "–í", "–ì", "–î"}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, l := range letters {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(l, prefix+l),
		))
	}
	rows = append(rows, addBackCancelRow())
	return rows
}

// ==== start ====

func StartAddScoreFSM(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	delete(addStates, chatID)
	addStates[chatID] = &AddFSMState{
		Step:               1,
		SelectedStudentIDs: []int64{},
	}

	out := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:")
	out.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(addClassNumberRows()...)
	bot.Send(out)
}

// ==== callbacks ====

func HandleAddScoreCallback(bot *tgbotapi.BotAPI, database *sql.DB, cq *tgbotapi.CallbackQuery) {
	chatID := cq.From.ID
	state, ok := addStates[chatID]
	if !ok {
		return
	}
	data := cq.Data

	// ‚ùå –û—Ç–º–µ–Ω–∞ ‚Äî –ø—Ä—è—á–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
	if data == "add_cancel" {
		delete(addStates, chatID)
		fsmutil.DisableMarkup(bot, chatID, cq.Message.MessageID)
		edit := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "üö´ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
		bot.Send(edit)
		return
	}

	// ‚¨Ö –ù–∞–∑–∞–¥
	if data == "add_back" {
		switch state.Step {
		case 2: // –≤—ã–±–∏—Ä–∞–ª–∏ –±—É–∫–≤—É ‚Üí –≤–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–æ–º–µ—Ä—É
			state.Step = 1
			addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:", addClassNumberRows())
			return
		case 3: // –≤—ã–±–∏—Ä–∞–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤ ‚Üí –≤–µ—Ä–Ω—ë–º—Å—è –∫ –±—É–∫–≤–µ
			state.Step = 2
			addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", addClassLetterRows("add_class_letter_"))
			return
		case 4: // –≤—ã–±–∏—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Üí –Ω–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫–∞–º
			state.Step = 3
			// –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
			students, _ := db.GetStudentsByClass(database, state.ClassNumber, state.ClassLetter)
			var buttons [][]tgbotapi.InlineKeyboardButton
			for _, s := range students {
				label := s.Name
				if containsInt64(state.SelectedStudentIDs, s.ID) {
					label = "‚úÖ " + label
				}
				callback := fmt.Sprintf("addscore_student_%d", s.ID)
				buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(label, callback),
				))
			}
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö", "add_select_all_students"),
			))
			buttons = append(buttons, addBackCancelRow())
			addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤:", buttons)
			return
		case 5: // –≤—ã–±–∏—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å ‚Üí –Ω–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			state.Step = 4
			user, _ := db.GetUserByTelegramID(database, chatID)
			categories, _ := db.GetAllCategories(database, string(*user.Role))
			var buttons [][]tgbotapi.InlineKeyboardButton
			for _, c := range categories {
				callback := fmt.Sprintf("addscore_category_%d", c.ID)
				buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(c.Name, callback),
				))
			}
			buttons = append(buttons, addBackCancelRow())
			addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", buttons)
			return
		case 6: // –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Üí –Ω–∞–∑–∞–¥ –∫ —É—Ä–æ–≤–Ω—é
			state.Step = 5
			levels, _ := db.GetLevelsByCategoryID(database, state.CategoryID)
			var buttons [][]tgbotapi.InlineKeyboardButton
			for _, l := range levels {
				callback := fmt.Sprintf("addscore_level_%d", l.ID)
				label := fmt.Sprintf("%s (%d)", l.Label, l.Value)
				buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(label, callback),
				))
			}
			buttons = append(buttons, addBackCancelRow())
			addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", buttons)
			return
		default:
			delete(addStates, chatID)
			fsmutil.DisableMarkup(bot, chatID, cq.Message.MessageID)
			edit := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "üö´ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
			bot.Send(edit)
			return
		}
	}

	// ==== –æ–±—ã—á–Ω—ã–µ –≤–µ—Ç–∫–∏ ====

	if strings.HasPrefix(data, "add_class_num_") {
		numStr := strings.TrimPrefix(data, "add_class_num_")
		num, _ := strconv.ParseInt(numStr, 10, 64)
		state.ClassNumber = num
		state.Step = 2

		addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", addClassLetterRows("add_class_letter_"))
		return
	}

	if strings.HasPrefix(data, "add_class_letter_") {
		state.ClassLetter = strings.TrimPrefix(data, "add_class_letter_")
		state.Step = 3

		students, _ := db.GetStudentsByClass(database, state.ClassNumber, state.ClassLetter)
		if len(students) == 0 {
			delete(addStates, chatID)
			fsmutil.DisableMarkup(bot, chatID, cq.Message.MessageID)
			edit := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "‚ùå –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
			bot.Send(edit)
			return
		}
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, s := range students {
			callback := fmt.Sprintf("addscore_student_%d", s.ID)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(s.Name, callback),
			))
		}
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö", "add_select_all_students"),
		))
		buttons = append(buttons, addBackCancelRow())

		addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤:", buttons)
		return
	}

	if strings.HasPrefix(data, "addscore_student_") || data == "add_select_all_students" {
		idStr := strings.TrimPrefix(data, "addscore_student_")
		id, _ := strconv.ParseInt(idStr, 10, 64)

		if data != "add_select_all_students" {
			if !containsInt64(state.SelectedStudentIDs, id) {
				state.SelectedStudentIDs = append(state.SelectedStudentIDs, id)
			}
		} else {
			students, _ := db.GetStudentsByClass(database, state.ClassNumber, state.ClassLetter)
			for _, s := range students {
				if !containsInt64(state.SelectedStudentIDs, s.ID) {
					state.SelectedStudentIDs = append(state.SelectedStudentIDs, s.ID)
				}
			}
		}

		// –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		students, _ := db.GetStudentsByClass(database, state.ClassNumber, state.ClassLetter)
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, s := range students {
			label := s.Name
			if containsInt64(state.SelectedStudentIDs, s.ID) {
				label = "‚úÖ " + label
			}
			callback := fmt.Sprintf("addscore_student_%d", s.ID)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(label, callback),
			))
		}
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö", "add_select_all_students"),
		))
		if len(state.SelectedStudentIDs) > 0 {
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ì–æ—Ç–æ–≤–æ", "add_students_done"),
			))
		}
		buttons = append(buttons, addBackCancelRow())

		addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤:", buttons)
		return
	}

	if data == "add_students_done" {
		state.Step = 4
		user, _ := db.GetUserByTelegramID(database, chatID)
		categories, _ := db.GetAllCategories(database, string(*user.Role))
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, c := range categories {
			callback := fmt.Sprintf("addscore_category_%d", c.ID)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(c.Name, callback),
			))
		}
		buttons = append(buttons, addBackCancelRow())
		addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", buttons)
		return
	}

	if strings.HasPrefix(data, "addscore_category_") {
		catID, _ := strconv.Atoi(strings.TrimPrefix(data, "addscore_category_"))
		state.CategoryID = catID
		state.Step = 5
		levels, _ := db.GetLevelsByCategoryID(database, catID)
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, l := range levels {
			callback := fmt.Sprintf("addscore_level_%d", l.ID)
			label := fmt.Sprintf("%s (%d)", l.Label, l.Value)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(label, callback),
			))
		}
		buttons = append(buttons, addBackCancelRow())
		addEditMenu(bot, chatID, cq.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", buttons)
		return
	}

	if strings.HasPrefix(data, "addscore_level_") {
		lvlID, _ := strconv.Atoi(strings.TrimPrefix(data, "addscore_level_"))
		state.LevelID = lvlID
		state.Step = 6

		// –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω) —Å Back/Cancel
		rows := [][]tgbotapi.InlineKeyboardButton{addBackCancelRow()}
		addEditMenu(bot, chatID, cq.Message.MessageID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞ —É—á–∞—Å—Ç–∏–µ):", rows)
		return
	}
}

// ==== —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–≥ ====

func HandleAddScoreText(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state, ok := addStates[chatID]
	if !ok || state.Step != 6 {
		return
	}

	// —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ—Ç–º–µ–Ω–∞
	if fsmutil.IsCancelText(msg.Text) {
		delete(addStates, chatID)
		bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
		return
	}

	state.Comment = strings.TrimSpace(msg.Text)

	// one‚Äëshot –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Å–∞–±–º–∏—Ç–∞
	key := fmt.Sprintf("add:%d", chatID)
	if !fsmutil.SetPending(chatID, key) {
		bot.Send(tgbotapi.NewMessage(chatID, "‚è≥ –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶"))
		return
	}
	defer fsmutil.ClearPending(chatID, key)

	level, _ := db.GetLevelByID(database, state.LevelID)
	user, _ := db.GetUserByTelegramID(database, chatID)
	createdBy := user.ID
	comment := state.Comment

	_ = db.SetActivePeriod(database)
	period, err := db.GetActivePeriod(database)
	if err != nil || period == nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥."))
		delete(addStates, chatID)
		return
	}

	for _, sid := range state.SelectedStudentIDs {
		score := models.Score{
			StudentID:  sid,
			CategoryID: int64(state.CategoryID),
			Points:     level.Value,
			Type:       "add",
			Comment:    &comment,
			Status:     "pending",
			CreatedBy:  createdBy,
			CreatedAt:  time.Now(),
			PeriodID:   &period.ID,
		}
		_ = db.AddScore(database, score)

		student, err := db.GetUserByID(database, sid)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:", err)
			continue
		}
		NotifyAdminsAboutScoreRequest(bot, database, score, student.Name)
	}
	bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞—è–≤–∫–∏ –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."))
	delete(addStates, chatID)
}

// –¥–æ—Å—Ç—É–ø –∏–∑ main.go
func GetAddScoreState(chatID int64) *AddFSMState {
	return addStates[chatID]
}
