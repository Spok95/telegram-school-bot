package handlers

import (
	"archive/zip"
	"bytes"
	"context"
	"database/sql"
	"encoding/csv"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/backupclient"
	"github.com/Spok95/telegram-school-bot/internal/bot/handlers/migrations"
	"github.com/Spok95/telegram-school-bot/internal/ctxutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/observability"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/pressly/goose/v3"
)

// HandleAdminRestoreLatest ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ë–î –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ ./backups —á–µ—Ä–µ–∑ sidecar
func HandleAdminRestoreLatest(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, chatID int64) {
	ctx, cancel := ctxutil.WithTimeout(ctx, 5*time.Minute)
	defer cancel()

	user, _ := db.GetUserByTelegramID(ctx, database, chatID)
	if user == nil || user.Role == nil || *user.Role != "admin" {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")); err != nil {
			metrics.HandlerErrors.Inc()
			observability.CaptureErr(err)
		}
		return
	}

	if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üõ† –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ë–î –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞‚Ä¶")); err != nil {
		metrics.HandlerErrors.Inc()
		observability.CaptureErr(err)
	}

	path, err := backupclient.RestoreLatest(ctx)
	if err != nil {
		metrics.HandlerErrors.Inc()
		observability.CaptureErr(err)
		_, _ = tg.Send(bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: %v", err)))
		return
	}

	_, _ = tg.Send(bot, tgbotapi.NewMessage(chatID, "‚úÖ –ì–æ—Ç–æ–≤–æ. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑: "+path))
}

// –ø—Ä–æ—Å—Ç–µ–π—à–∏–π FSM –ø–æ chatID
var restoreWaiting = map[int64]bool{}

func AdminRestoreFSMActive(chatID int64) bool { return restoreWaiting[chatID] }

func HandleAdminRestoreStart(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, chatID int64) {
	user, _ := db.GetUserByTelegramID(ctx, database, chatID)
	if user == nil || user.Role == nil || *user.Role != "admin" {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	restoreWaiting[chatID] = true

	text := "‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.\n\n" +
		"–ü—Ä–∏—à–ª–∏—Ç–µ ZIP, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–Ω–æ–ø–∫–æ–π ¬´üíæ –ë—ç–∫–∞–ø –ë–î¬ª. –Ø –∑–∞–≥—Ä—É–∂—É —Ñ–∞–π–ª –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—é –¥–∞–Ω–Ω—ã–µ."

	cancel := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "restore_cancel")
	m := tgbotapi.NewMessage(chatID, text)
	m.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(cancel),
	)

	if _, err := tg.Send(bot, m); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

func HandleAdminRestoreCallback(ctx context.Context, bot *tgbotapi.BotAPI, cb *tgbotapi.CallbackQuery) {
	select {
	case <-ctx.Done():
		return
	default:
	}
	chatID := cb.Message.Chat.ID
	if cb.Data == "restore_cancel" {
		delete(restoreWaiting, chatID)

		// –°–Ω–∏–º–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∞
		_, _ = tg.Send(bot, tgbotapi.NewEditMessageReplyMarkup(
			chatID, cb.Message.MessageID, tgbotapi.InlineKeyboardMarkup{}),
		)

		_, _ = tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
	}
}

func HandleAdminRestoreMessage(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	ctx, cancel := ctxutil.WithTimeout(ctx, 10*time.Minute)
	defer cancel()
	chatID := msg.Chat.ID
	if !AdminRestoreFSMActive(chatID) {
		return
	}
	if msg.Document == nil {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "–ü—Ä–∏—à–ª–∏—Ç–µ ZIP-—Ñ–∞–π–ª —Å –±—ç–∫–∞–ø–æ–º.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	defer func() { delete(restoreWaiting, chatID) }()

	// –∫–∞—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
	path, err := downloadTelegramFile(ctx, bot, msg.Document.FileID)
	if err != nil {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: %v", err))); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	defer func() { _ = os.Remove(path) }()

	if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚åõ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ë–î –∏–∑ –±—ç–∫–∞–ø–∞‚Ä¶")); err != nil {
		metrics.HandlerErrors.Inc()
	}

	if err := restoreFromZip(ctx, database, path); err != nil {
		log.Println("restore error:", err)
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err))); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚úÖ –ì–æ—Ç–æ–≤–æ. –ë–∞–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

func downloadTelegramFile(ctx context.Context, bot *tgbotapi.BotAPI, fileID string) (string, error) {
	f, err := bot.GetFile(tgbotapi.FileConfig{FileID: fileID})
	if err != nil {
		return "", err
	}
	token := os.Getenv("BOT_TOKEN")
	if token == "" {
		return "", errors.New("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}
	url := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", token, f.FilePath)
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)
	if err != nil {
		return "", err
	}
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return "", err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode != 200 {
		return "", fmt.Errorf("telegram file status: %s", resp.Status)
	}
	tmp := filepath.Join(os.TempDir(), "restore_"+time.Now().Format("20060102_150405")+".zip")
	out, err := os.Create(tmp)
	if err != nil {
		return "", err
	}
	defer func() { _ = out.Close() }()
	if _, err := io.Copy(out, resp.Body); err != nil {
		return "", err
	}
	return tmp, nil
}

func restoreFromZip(ctx context.Context, database *sql.DB, zipPath string) error {
	zr, err := zip.OpenReader(zipPath)
	if err != nil {
		return err
	}
	defer func() { _ = zr.Close() }()

	// –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —Å—Ö–µ–º—É –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
	if err := ensureSchemaContext(ctx, database); err != nil {
		return fmt.Errorf("ensure schema: %w", err)
	}

	// —á–∏—Ç–∞–µ–º –≤—Å–µ CSV –≤ –ø–∞–º—è—Ç—å (–æ–±—ã—á–Ω–æ –æ–±—ä—ë–º—ã —É–º–µ—Ä–µ–Ω–Ω—ã–µ)
	type tableDump struct {
		name string
		csv  *csv.Reader
		r    io.ReadCloser
	}
	var dumps []tableDump
	for _, f := range zr.File {
		if strings.HasPrefix(f.Name, "data/") && strings.HasSuffix(f.Name, ".csv") {
			rc, err := f.Open()
			if err != nil {
				return err
			}
			// –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã csv.Reader –Ω–µ –∑–∞–∫—Ä—ã–ª –Ω–∞–º zip-—Ä–∏–¥–µ—Ä —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
			buf := &bytes.Buffer{}
			if _, err := io.Copy(buf, rc); err != nil {
				_ = rc.Close()
				return err
			}
			_ = rc.Close()
			r := io.NopCloser(bytes.NewReader(buf.Bytes()))
			dumps = append(dumps, tableDump{
				name: strings.TrimSuffix(filepath.Base(f.Name), ".csv"),
				csv:  csv.NewReader(bytes.NewReader(buf.Bytes())),
				r:    r,
			})
		}
	}
	if len(dumps) == 0 {
		return errors.New("–≤ –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç data/*.csv")
	}

	// –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ (—É—á—ë—Ç FK)
	order := []string{
		"users", "classes", "categories", "periods", "parents_students",
		"scores", "role_changes", "score_levels",
	}
	index := map[string]tableDump{}
	for _, d := range dumps {
		index[d.name] = d
	}

	tx, err := database.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return fmt.Errorf("begin tx: %w", err)
	}
	defer func() { _ = tx.Rollback() }()

	// TRUNCATE (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç) –∏ –∑–∞–ª–∏–≤–∫–∞
	for _, t := range order {
		d, ok := index[t]
		if !ok {
			continue
		}
		exists, err := tableExistsContext(ctx, tx, t)
		if err != nil {
			return err
		}
		if exists {
			if _, err := tx.ExecContext(ctx, `TRUNCATE `+quoteIdent(t)+` CASCADE`); err != nil {
				return fmt.Errorf("truncate %s: %w", t, err)
			}
		} else {
			log.Println("info: skip truncate ‚Äî table not exists:", t)
		}
		if err := loadCSVContext(ctx, tx, t, d.csv); err != nil {
			return fmt.Errorf("load %s: %w", t, err)
		}
		if err := resetSequenceContext(ctx, tx, t); err != nil {
			return fmt.Errorf("reset seq %s: %w", t, err)
		}
	}
	// –∑–∞–≥—Ä—É–∂–∞–µ–º ¬´–æ—Å—Ç–∞–ª—å–Ω—ã–µ¬ª —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞ (–µ—Å–ª–∏ –±—ã–ª–∏ –Ω–æ–≤—ã–µ)
	for _, d := range dumps {
		skip := false
		for _, t := range order {
			if t == d.name {
				skip = true
				break
			}
		}
		if skip {
			continue
		}
		exists, err := tableExistsContext(ctx, tx, d.name)
		if err != nil {
			return err
		}
		if !exists {
			log.Println("info: skip restore ‚Äî table not exists in DB:", d.name)
			continue
		}
		if _, err := tx.ExecContext(ctx, `TRUNCATE `+quoteIdent(d.name)+` CASCADE`); err != nil {
			return fmt.Errorf("truncate %s: %w", d.name, err)
		}
		if err := loadCSVContext(ctx, tx, d.name, d.csv); err != nil {
			return fmt.Errorf("load %s: %w", d.name, err)
		}
		if err := resetSequenceContext(ctx, tx, d.name); err != nil {
			return fmt.Errorf("reset seq %s: %w", d.name, err)
		}
	}

	if err := tx.Commit(); err != nil {
		return err
	}
	return nil
}

func ensureSchemaContext(ctx context.Context, database *sql.DB) error {
	// –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
	var n int
	if err := database.QueryRowContext(ctx, `SELECT count(*) FROM information_schema.tables WHERE table_schema='public'`).Scan(&n); err != nil {
		return err
	}
	if n > 0 {
		return nil
	}
	// –Ω–∞–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ embed FS
	goose.SetBaseFS(migrations.FS)
	return goose.Up(database, ".")
}

func loadCSVContext(ctx context.Context, tx *sql.Tx, table string, r *csv.Reader) error {
	cols, err := r.Read()
	if err != nil {
		return err
	}
	// —É–∑–Ω–∞—ë–º —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ information_schema (–Ω—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç/–≤—Ä–µ–º–µ–Ω)
	colTypes, err := getColumnTypesContext(ctx, tx, table)
	if err != nil {
		return err
	}

	ph := make([]string, len(cols))
	for i := range cols {
		ph[i] = "$" + strconv.Itoa(i+1)
	}
	// –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–±–æ—Ä–∫–∞ SQL –±–µ–∑ fmt.Sprintf + –∫–≤–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
	qcols := make([]string, len(cols))
	for i, c := range cols {
		qcols[i] = quoteIdent(c)
	}
	stmt := "INSERT INTO " + quoteIdent(table) +
		" (" + strings.Join(qcols, ",") + ") VALUES (" + strings.Join(ph, ",") + ")"

	for {
		rec, err := r.Read()
		if errors.Is(err, io.EOF) {
			break
		}
		if err != nil {
			return err
		}
		args := make([]any, len(rec))
		for i, v := range rec {
			s := strings.TrimSpace(v)
			// –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã: "", "<nil>", "null" ‚Üí NULL
			if s == "" || s == "<nil>" || strings.EqualFold(s, "null") {
				args[i] = nil
				continue
			}
			// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ —Ç–∏–ø—É –∫–æ–ª–æ–Ω–∫–∏
			t := strings.ToLower(colTypes[cols[i]])
			switch {
			case strings.Contains(t, "timestamp") || t == "date":
				if tt, perr := parseTimeFlex(s); perr == nil {
					args[i] = tt
				} else {
					// –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–ø—É—Å—Ç—å —É–ø–∞–¥—ë—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ)
					args[i] = s
				}
			case strings.Contains(t, "boolean"):
				// –ø—É—Å—Ç—å PG —Å–∞–º –ø—Ä–∏–≤–µ–¥—ë—Ç –∏–∑ 't/true/1' ‚Äî —Å—Ç—Ä–æ–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
				args[i] = s
			case strings.Contains(t, "integer") || strings.Contains(t, "bigint") ||
				strings.Contains(t, "smallint") || strings.Contains(t, "numeric") ||
				strings.Contains(t, "double"):
				// —á–∏—Å–ª–∞ —É–¥–æ–±–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–π ‚Äî PG –ø—Ä–∏–≤–µ–¥—ë—Ç, –Ω–æ –±–µ–∑ "<nil>"
				args[i] = s
			default:
				args[i] = s
			}
		}
		if _, err := tx.ExecContext(ctx, stmt, args...); err != nil {
			return err
		}
	}
	return nil
}

// –ü–æ–ª—É—á–∞–µ–º map[column_name]data_type –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
func getColumnTypesContext(ctx context.Context, tx *sql.Tx, table string) (map[string]string, error) {
	rows, err := tx.QueryContext(ctx, `
        SELECT column_name, data_type
        FROM information_schema.columns
        WHERE table_schema='public' AND table_name = $1
    `, table)
	if err != nil {
		return nil, err
	}
	defer func() { _ = rows.Close() }()
	m := make(map[string]string)
	for rows.Next() {
		var name, dt string
		if err := rows.Scan(&name, &dt); err != nil {
			return nil, err
		}
		m[name] = dt
	}
	return m, rows.Err()
}

// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (RFC3339/RFC3339Nano –∏ Go-—Å—Ç—Ä–æ–∫–∞ —Å –∑–æ–Ω–æ–π —Ç–∏–ø–∞ "MSK")
func parseTimeFlex(s string) (time.Time, error) {
	layouts := []string{
		time.RFC3339Nano,
		time.RFC3339,
		"2006-01-02 15:04:05.999999999 -0700 MST", // –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-08-24 04:13:10.69002 +0300 MSK
		"2006-01-02 15:04:05 -0700 MST",
		"2006-01-02 15:04:05.999999999Z07:00",
		"2006-01-02 15:04:05Z07:00",
		"2006-01-02",
	}
	var lastErr error
	for _, layout := range layouts {
		if t, err := time.Parse(layout, s); err == nil {
			return t, nil
		} else {
			lastErr = err
		}
	}
	return time.Time{}, lastErr
}

func resetSequenceContext(ctx context.Context, tx *sql.Tx, table string) error {
	// 1) –ï—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–æ–ª–æ–Ω–∫–∞ id?
	var hasID bool
	if err := tx.QueryRowContext(ctx, `
		SELECT EXISTS (
		  SELECT 1 FROM information_schema.columns
		  WHERE table_schema='public' AND table_name=$1 AND column_name='id'
		)`, table).Scan(&hasID); err != nil {
		return err
	}
	if !hasID {
		return nil // —É —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç id ‚Äî –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å
	}

	// 2) –ï—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É id?
	var seq sql.NullString
	if err := tx.QueryRowContext(ctx, `SELECT pg_get_serial_sequence($1,'id')`, table).Scan(&seq); err != nil {
		return err
	}
	if !seq.Valid || seq.String == "" {
		return nil // id –Ω–µ serial/identity ‚Äî —Å–±—Ä–æ—Å –Ω–µ –Ω—É–∂–µ–Ω
	}

	// 3) –í—ã—á–∏—Å–ª—è–µ–º MAX(id); –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫ –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º value=1, is_called=false
	qTable := quoteIdent(table)
	var maxID sql.NullInt64
	if err := tx.QueryRowContext(ctx, "SELECT MAX(id) FROM "+qTable).Scan(&maxID); err != nil {
		return err
	}
	var value int64 = 1
	isCalled := false
	if maxID.Valid {
		if maxID.Int64 >= 1 {
			value = maxID.Int64
			isCalled = true
		} else {
			value = 1
			isCalled = false
		}
	}
	// 4) setval –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	_, err := tx.ExecContext(ctx, `SELECT setval($1::regclass, $2, $3)`, seq.String, value, isCalled)
	return err
}

// tableExists ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ public
func tableExistsContext(ctx context.Context, tx *sql.Tx, table string) (bool, error) {
	var exists bool
	err := tx.QueryRowContext(ctx, `
		SELECT EXISTS (
		  SELECT 1 FROM information_schema.tables
		  WHERE table_schema='public' AND table_name=$1
		)`, table).Scan(&exists)
	return exists, err
}

// quoteIdent ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è SQL
func quoteIdent(id string) string {
	return `"` + strings.ReplaceAll(id, `"`, `""`) + `"`
}
