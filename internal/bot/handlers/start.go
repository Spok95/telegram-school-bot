package handlers

import (
	"database/sql"
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
)

func HandleStart(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	telegramID := msg.From.ID
	fullName := msg.From.FirstName + " " + msg.From.LastName
	roleText := "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
	text := ""
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
	user, err := db.GetUserByTelegramID(database, telegramID)
	if err != nil {
		// –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—ë–º –≤ –±–∞–∑–µ
		_, err := database.Exec(`
INSERT INTO users (telegram_id, name, is_active)
VALUES (?, ?, ?)`,
			telegramID, fullName, true)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
			sendText(bot, msg.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–æ–ª—å "admin", –µ—Å–ª–∏ Telegram ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
		adminID := os.Getenv("ADMIN_ID")
		if adminID != "" && adminID == fmt.Sprint(telegramID) {
			_, err = database.Exec(`UPDATE users SET role = ?, is_active = 1 WHERE telegram_id = ?`, "admin", telegramID)
			if err != nil {
				log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", err)
			}
		}
	}

	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º user.Role –∏ user.IsActive
	if !user.IsActive {
		sendText(bot, msg.Chat.ID, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	if user.Role != nil {
		roleText = string(*user.Role)
	}

	text = fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %s!\n–í–∞—à–∞ —Ä–æ–ª—å: %s", user.Name, roleText)

	// –ú–µ–Ω—é –ø–æ —Ä–æ–ª—è–º
	var keyboard tgbotapi.ReplyKeyboardMarkup

	switch roleText {
	case "student":
		keyboard = studentMenu()
	case "teacher":
		keyboard = teacherMenu()
	case "admin":
		keyboard = adminMenu()
	case "parent":
		keyboard = parentMenu()
	default:
		msgOut := tgbotapi.NewMessage(msg.Chat.ID, text)
		msgOut.ReplyMarkup = tgbotapi.ReplyKeyboardRemove{RemoveKeyboard: true}
		bot.Send(msgOut)
		return
	}

	msgOut := tgbotapi.NewMessage(msg.Chat.ID, text)
	msgOut.ReplyMarkup = keyboard
	bot.Send(msgOut)
}

func sendText(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func studentMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥"),
		),
	)
}

func teacherMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã"),
			tgbotapi.NewKeyboardButton("üìâ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã"),
		),
	)
}

func adminMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì• –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è"),
			tgbotapi.NewKeyboardButton("üìä –û—Ç—á—ë—Ç—ã"),
		),
	)
}

func parentMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–±—ë–Ω–∫–∞"),
		),
	)
}
