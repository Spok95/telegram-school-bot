package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/bot/shared/fsmutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	ExportStepReportType = iota
	ExportStepPeriodMode
	ExportStepFixedPeriodSelect
	ExportStepCustomStartDate
	ExportStepCustomEndDate
	ExportStepClassNumber
	ExportStepClassLetter
	ExportStepStudentSelect
	ExportStepSchoolYearSelect
)

type ExportFSMState struct {
	Step               int
	ReportType         string
	PeriodMode         string
	PeriodID           *int64
	FromDate           *time.Time
	ToDate             *time.Time
	ClassNumber        int64
	ClassLetter        string
	SelectedStudentIDs []int64
}

var exportStates = make(map[int64]*ExportFSMState)

// StartExportFSM —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
func StartExportFSM(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	u, _ := db.GetUserByTelegramID(database, chatID)
	if u == nil || !fsmutil.MustBeActiveForOps(u) {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	exportStates[chatID] = &ExportFSMState{Step: ExportStepReportType}

	rows := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ —É—á–µ–Ω–∏–∫—É", "export_type_student"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ –∫–ª–∞—Å—Å—É", "export_type_class"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ —à–∫–æ–ª–µ", "export_type_school"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "exp_users_open"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "export_cancel"),
		),
	}
	msgOut := tgbotapi.NewMessage(chatID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:")
	msgOut.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	if _, err := tg.Send(bot, msgOut); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

func HandleExportCallback(bot *tgbotapi.BotAPI, database *sql.DB, cq *tgbotapi.CallbackQuery) {
	chatID := cq.Message.Chat.ID
	state, ok := exportStates[chatID]
	if !ok {
		return
	}
	data := cq.Data

	// ‚ùå –û—Ç–º–µ–Ω–∞ ‚Äî –ø—Ä—è—á–µ–º –∫–ª–∞–≤—É –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —É –≠–¢–û–ì–û –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if data == "export_cancel" {
		delete(exportStates, chatID)
		fsmutil.DisableMarkup(bot, chatID, cq.Message.MessageID)
		edit := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "üö´ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
		if _, err := tg.Send(bot, edit); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}

	// ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
	if data == "export_back" {
		switch state.Step {
		case ExportStepPeriodMode:
			state.Step = ExportStepReportType
			editMenu(bot, chatID, cq.Message.MessageID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", startRows())
			return
		case ExportStepFixedPeriodSelect:
			state.Step = ExportStepPeriodMode
			editMenu(bot, chatID, cq.Message.MessageID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞:", periodModeRows())
			return
		case ExportStepClassNumber:
			state.Step = ExportStepPeriodMode
			editMenu(bot, chatID, cq.Message.MessageID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞:", periodModeRows())
			return
		case ExportStepClassLetter:
			state.Step = ExportStepClassNumber
			editMenu(bot, chatID, cq.Message.MessageID, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:", classNumberRows("export_class_number_"))
			return
		case ExportStepStudentSelect:
			state.Step = ExportStepClassLetter
			editMenu(bot, chatID, cq.Message.MessageID, "üî† –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", classLetterRows("export_class_letter_"))
			return
		case ExportStepCustomStartDate:
			// –ù–∞–∑–∞–¥ —Å–æ —Å—Ç–∞—Ä—Ç–∞ ‚Üí –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–∏–æ–¥–∞
			state.Step = ExportStepPeriodMode
			editMenu(bot, chatID, cq.Message.MessageID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞:", periodModeRows())
			return
		case ExportStepCustomEndDate:
			// –ù–∞–∑–∞–¥ —Å –∫–æ–Ω—Ü–∞ ‚Üí –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤–≤–æ–¥—É —Å—Ç–∞—Ä—Ç‚Äë–¥–∞—Ç—ã
			state.Step = ExportStepCustomStartDate
			rows := [][]tgbotapi.InlineKeyboardButton{
				fsmutil.BackCancelRow("export_back", "export_cancel"),
			}
			cfg := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
			mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
			cfg.ReplyMarkup = &mk
			if _, err := tg.Send(bot, cfg); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		default:
			delete(exportStates, chatID)
			fsmutil.DisableMarkup(bot, chatID, cq.Message.MessageID)
			edit := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "üö´ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
			if _, err := tg.Send(bot, edit); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
	}

	switch state.Step {
	case ExportStepReportType:
		if strings.HasPrefix(data, "export_type_") {
			state.ReportType = strings.TrimPrefix(data, "export_type_")
			state.Step = ExportStepPeriodMode
			editMenu(bot, chatID, cq.Message.MessageID, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞:", periodModeRows())
		}

	case ExportStepPeriodMode:
		switch data {
		case "export_mode_fixed":
			state.PeriodMode = "fixed"
			state.Step = ExportStepFixedPeriodSelect
			_ = db.SetActivePeriod(database)
			periods, err := db.ListPeriods(database)
			if err != nil || len(periods) == 0 {
				delete(exportStates, chatID)
				edit := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã.")
				if _, err := tg.Send(bot, edit); err != nil {
					metrics.HandlerErrors.Inc()
				}
				return
			}
			var rows [][]tgbotapi.InlineKeyboardButton
			for _, p := range periods {
				label := p.Name
				if p.IsActive {
					label += " ‚úÖ"
				}
				cb := "export_period_" + strconv.FormatInt(p.ID, 10)
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(label, cb)))
			}
			rows = append(rows, fsmutil.BackCancelRow("export_back", "export_cancel"))
			editMenu(bot, chatID, cq.Message.MessageID, "üìò –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:", rows)

		case "export_mode_custom":
			state.PeriodMode = "custom"
			state.Step = ExportStepCustomStartDate

			fsmutil.DisableMarkup(bot, chatID, cq.Message.MessageID)

			rows := [][]tgbotapi.InlineKeyboardButton{
				fsmutil.BackCancelRow("export_back", "export_cancel"),
			}
			msg := tgbotapi.NewMessage(chatID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
			// –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–≥–æ–≤ –Ω–µ–∏–∑–±–µ–∂–Ω–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if _, err := tg.Send(bot, msg); err != nil {
				metrics.HandlerErrors.Inc()
			}
		case "export_mode_schoolyear":
			state.Step = ExportStepSchoolYearSelect
			editMenu(bot, chatID, cq.Message.MessageID, "üìò –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—ã–π –≥–æ–¥:", schoolYearRows("export_schoolyear_"))
			return
		}

	case ExportStepFixedPeriodSelect:
		if strings.HasPrefix(data, "export_period_") {
			idStr := strings.TrimPrefix(data, "export_period_")
			id, _ := strconv.ParseInt(idStr, 10, 64)
			state.PeriodID = &id

			// –¥–∞–ª—å—à–µ ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
			if state.ReportType == "school" {
				if _, err := tg.Request(bot, tgbotapi.NewCallback(cq.ID, "üì• –û—Ç—á—ë—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")); err != nil {
					metrics.HandlerErrors.Inc()
				}
				generateExportReport(bot, database, chatID, state)
				delete(exportStates, chatID)
				return
			}
			// student / class ‚Üí –≤—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞ –∫–ª–∞—Å—Å–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
			state.Step = ExportStepClassNumber
			editMenu(bot, chatID, cq.Message.MessageID, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:", classNumberRows("export_class_number_"))
		}

	case ExportStepClassNumber:
		if strings.HasPrefix(data, "export_class_number_") {
			state.ClassNumber, _ = strconv.ParseInt(strings.TrimPrefix(data, "export_class_number_"), 10, 64)
			state.Step = ExportStepClassLetter
			editMenu(bot, chatID, cq.Message.MessageID, "üî† –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", classLetterRows("export_class_letter_"))
		}

	case ExportStepClassLetter:
		if strings.HasPrefix(data, "export_class_letter_") {
			state.ClassLetter = strings.TrimPrefix(data, "export_class_letter_")
			if state.ReportType == "student" {
				state.Step = ExportStepStudentSelect
				// —Ç—É—Ç –Ω–∞–º –≤–∞–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ message_id, –ø–æ—ç—Ç–æ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
				promptStudentSelectExport(bot, database, cq)
			} else if state.ReportType == "class" {
				if _, err := tg.Request(bot, tgbotapi.NewCallback(cq.ID, "üì• –û—Ç—á—ë—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")); err != nil {
					metrics.HandlerErrors.Inc()
				}
				generateExportReport(bot, database, chatID, state)
				delete(exportStates, chatID)
			}
		}

	case ExportStepStudentSelect:
		if strings.HasPrefix(data, "export_select_student_") {
			idStr := strings.TrimPrefix(data, "export_select_student_")
			id, _ := strconv.ParseInt(idStr, 10, 64)
			found := false
			for i, sid := range state.SelectedStudentIDs {
				if sid == id {
					state.SelectedStudentIDs = append(state.SelectedStudentIDs[:i], state.SelectedStudentIDs[i+1:]...)
					found = true
					break
				}
			}
			if !found {
				state.SelectedStudentIDs = append(state.SelectedStudentIDs, id)
			}
			promptStudentSelectExport(bot, database, cq)
			return
		} else if data == "export_students_done" {
			if len(state.SelectedStudentIDs) == 0 {
				if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")); err != nil {
					metrics.HandlerErrors.Inc()
				}
				return
			}
			if _, err := tg.Request(bot, tgbotapi.NewCallback(cq.ID, "üì• –û—Ç—á—ë—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			generateExportReport(bot, database, chatID, state)
			delete(exportStates, chatID)
		}
	case ExportStepSchoolYearSelect:
		if strings.HasPrefix(data, "export_schoolyear_") {
			startYear, _ := strconv.Atoi(strings.TrimPrefix(data, "export_schoolyear_"))
			from, to := db.SchoolYearBoundsByStartYear(startYear)
			state.FromDate, state.ToDate = &from, &to

			// –î–∞–ª—å—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∫ –≤ ¬´–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º¬ª –¥–∏–∞–ø–∞–∑–æ–Ω–µ:
			switch state.ReportType {
			case "student":
				// –≤—ã–±–∏—Ä–∞–µ–º —É—á–µ–Ω–∏–∫–∞/—É—á–µ–Ω–∏–∫–æ–≤
				state.Step = ExportStepStudentSelect
				promptStudentSelectExport(bot, database, cq)
				return
			case "class":
				// –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å
				state.Step = ExportStepClassNumber
				editMenu(bot, chatID, cq.Message.MessageID, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:", classNumberRows("export_class_number_"))
				return
			case "school":
				// —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
				if _, err := tg.Request(bot, tgbotapi.NewCallback(cq.ID, "üì• –û—Ç—á—ë—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")); err != nil {
					metrics.HandlerErrors.Inc()
				}
				generateExportReport(bot, database, chatID, state)
				delete(exportStates, chatID)
				return
			}
		}
	}
}

func HandleExportText(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state := exportStates[chatID]
	if state == nil {
		return
	}

	// —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ—Ç–º–µ–Ω–∞
	if fsmutil.IsCancelText(msg.Text) {
		delete(exportStates, chatID)
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}

	switch state.Step {
	case ExportStepCustomStartDate:
		date, err := time.Parse("02.01.2006", strings.TrimSpace(msg.Text))
		if err != nil {
			rows := [][]tgbotapi.InlineKeyboardButton{
				fsmutil.BackCancelRow("export_back", "export_cancel"),
			}
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
			if _, err := tg.Send(bot, msg); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		state.FromDate = &date
		state.Step = ExportStepCustomEndDate
		rows := [][]tgbotapi.InlineKeyboardButton{
			fsmutil.BackCancelRow("export_back", "export_cancel"),
		}
		msg := tgbotapi.NewMessage(chatID, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
		if _, err := tg.Send(bot, msg); err != nil {
			metrics.HandlerErrors.Inc()
		}

	case ExportStepCustomEndDate:
		date, err := time.Parse("02.01.2006", strings.TrimSpace(msg.Text))
		if err != nil {
			rows := [][]tgbotapi.InlineKeyboardButton{
				fsmutil.BackCancelRow("export_back", "export_cancel"),
			}
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
			if _, err := tg.Send(bot, msg); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		endOfDay := date.Add(23*time.Hour + 59*time.Minute + 59*time.Second)
		state.ToDate = &endOfDay

		// –¥–∞–ª—å—à–µ –∫–∞–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
		if state.ReportType == "school" {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üì• –û—Ç—á—ë—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			generateExportReport(bot, database, chatID, state)
			delete(exportStates, chatID)
			return
		}
		state.Step = ExportStepClassNumber
		// –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
		msgOut := tgbotapi.NewMessage(chatID, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:")
		msgOut.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(classNumberRows("export_class_number_")...)
		if _, err := tg.Send(bot, msgOut); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}
}

// ==== –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ–Ω—é (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è) ====

func startRows() [][]tgbotapi.InlineKeyboardButton {
	return [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ —É—á–µ–Ω–∏–∫—É", "export_type_student"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ –∫–ª–∞—Å—Å—É", "export_type_class"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ —à–∫–æ–ª–µ", "export_type_school"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "exp_users_open"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "export_cancel"),
		),
	}
}

func periodModeRows() [][]tgbotapi.InlineKeyboardButton {
	return [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÜ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π", "export_mode_fixed"),
			tgbotapi.NewInlineKeyboardButtonData("üóì –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π", "export_mode_custom"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìò –£—á–µ–±–Ω—ã–π –≥–æ–¥", "export_mode_schoolyear"),
		),
		fsmutil.BackCancelRow("export_back", "export_cancel"),
	}
}

func classNumberRows(prefix string) [][]tgbotapi.InlineKeyboardButton {
	var rows [][]tgbotapi.InlineKeyboardButton
	for i := 1; i <= 11; i++ {
		btn := tgbotapi.NewInlineKeyboardButtonData(strconv.Itoa(i), fmt.Sprintf("%s%d", prefix, i))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	rows = append(rows, fsmutil.BackCancelRow("export_back", "export_cancel"))
	return rows
}

func classLetterRows(prefix string) [][]tgbotapi.InlineKeyboardButton {
	letters := []string{"–ê", "–ë", "–í", "–ì", "–î"}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, l := range letters {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(l, prefix+l)))
	}
	rows = append(rows, fsmutil.BackCancelRow("export_back", "export_cancel"))
	return rows
}

// –ï–¥–∏–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func editMenu(bot *tgbotapi.BotAPI, chatID int64, messageID int, text string, rows [][]tgbotapi.InlineKeyboardButton) {
	cfg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
	cfg.ReplyMarkup = &mk
	if _, err := tg.Send(bot, cfg); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

// –í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func promptStudentSelectExport(bot *tgbotapi.BotAPI, database *sql.DB, cq *tgbotapi.CallbackQuery) {
	chatID := cq.Message.Chat.ID
	state := exportStates[chatID]
	students, err := db.GetStudentsByClass(database, state.ClassNumber, state.ClassLetter)
	if err != nil {
		edit := tgbotapi.NewEditMessageText(chatID, cq.Message.MessageID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤.")
		if _, err := tg.Send(bot, edit); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, student := range students {
		selected := ""
		for _, id := range state.SelectedStudentIDs {
			if id == student.ID {
				selected = " ‚úÖ"
				break
			}
		}
		label := fmt.Sprintf("%s%s", student.Name, selected)
		cb := fmt.Sprintf("export_select_student_%d", student.ID)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(label, cb)))
	}
	if len(state.SelectedStudentIDs) > 0 {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ì–æ—Ç–æ–≤–æ", "export_students_done")))
	}
	rows = append(rows, fsmutil.BackCancelRow("export_back", "export_cancel"))

	edit := tgbotapi.NewEditMessageReplyMarkup(chatID, cq.Message.MessageID, tgbotapi.NewInlineKeyboardMarkup(rows...))
	if _, err := tg.Send(bot, edit); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

func generateExportReport(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64, state *ExportFSMState) {
	// –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	key := fmt.Sprintf("export:%d:%s", chatID, state.ReportType)
	if !fsmutil.SetPending(chatID, key) {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚è≥ –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	defer fsmutil.ClearPending(chatID, key)

	if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚è≥ –§–æ—Ä–º–∏—Ä—É—é Excel-—Ñ–∞–π–ª...")); err != nil {
		metrics.HandlerErrors.Inc()
	}
	go func() {
		var scores []models.ScoreWithUser
		var err error
		var periodLabel string

		switch state.PeriodMode {
		case "fixed":
			if state.PeriodID == nil {
				if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")); err != nil {
					metrics.HandlerErrors.Inc()
				}
				return
			}
			p, errP := db.GetPeriodByID(database, int(*state.PeriodID))
			if errP != nil || p == nil {
				if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")); err != nil {
					metrics.HandlerErrors.Inc()
				}
				return
			}
			periodLabel = p.Name
			switch state.ReportType {
			case "student":
				for _, id := range state.SelectedStudentIDs {
					part, err := db.GetScoresByStudentAndPeriod(database, id, int(*state.PeriodID))
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", err)
					}
					scores = append(scores, part...)
				}
			case "class":
				scores, err = db.GetScoresByClassAndPeriod(database, state.ClassNumber, state.ClassLetter, *state.PeriodID)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", err)
				}
			case "school":
				scores, err = db.GetScoresByPeriod(database, int(*state.PeriodID))
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", err)
				}
			}

		case "custom":
			if state.FromDate == nil || state.ToDate == nil {
				if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –î–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã")); err != nil {
					metrics.HandlerErrors.Inc()
				}
				return
			}
			periodLabel = fmt.Sprintf("%s‚Äì%s", state.FromDate.Format("02.01.2006"), state.ToDate.Format("02.01.2006"))
			switch state.ReportType {
			case "student":
				for _, id := range state.SelectedStudentIDs {
					part, err := db.GetScoresByStudentAndDateRange(database, id, *state.FromDate, *state.ToDate)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", err)
					}
					scores = append(scores, part...)
				}
			case "class":
				scores, err = db.GetScoresByClassAndDateRange(database, int(state.ClassNumber), state.ClassLetter, *state.FromDate, *state.ToDate)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", err)
				}
			case "school":
				scores, err = db.GetScoresByDateRange(database, *state.FromDate, *state.ToDate)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", err)
				}
			}
		}

		if len(scores) == 0 {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üîé –î–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}

		var filePath string
		var collective int64
		var className string

		// --- –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ ---
		// –î–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–ª–∞—Å—Å—É
		if state.ReportType == "class" && len(scores) > 0 {
			collective, className = report(state, database)
		}
		// –î–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ —É—á–µ–Ω–∏–∫—É ‚Äî –∫–ª–∞—Å—Å –±–µ—Ä—ë–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—É—á–µ–Ω–∏–∫–æ–≤ –≤—ã–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞)
		if state.ReportType == "student" && len(scores) > 0 {
			collective, className = report(state, database)
		}
		switch state.ReportType {
		case "student":
			filePath, err = generateStudentReport(scores, collective, className, periodLabel)
		case "class":
			filePath, err = generateClassReport(scores, collective, className, periodLabel)
		case "school":
			filePath, err = generateSchoolReport(scores)
		}
		if err != nil {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}

		doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filePath))
		doc.Caption = fmt.Sprintf("üìä –û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: %s", periodLabel)
		if _, err := tg.Send(bot, doc); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}()
}

func GetExportState(userID int64) *ExportFSMState {
	return exportStates[userID]
}

func ClearExportState(userID int64) {
	delete(exportStates, userID)
}

func schoolYearRows(prefix string) [][]tgbotapi.InlineKeyboardButton {
	now := time.Now()
	cur := db.CurrentSchoolYearStartYear(now)
	var rows [][]tgbotapi.InlineKeyboardButton
	for y := cur; y >= cur-5; y-- {
		label := db.SchoolYearLabel(y)
		cb := fmt.Sprintf("%s%d", prefix, y)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(label, cb),
		))
	}
	rows = append(rows, fsmutil.BackCancelRow("export_back", "export_cancel"))
	return rows
}

func report(state *ExportFSMState, database *sql.DB) (collective int64, className string) {
	className = fmt.Sprintf("%d%s", int(state.ClassNumber), state.ClassLetter)
	auctionID := db.GetCategoryIDByName(database, "–ê—É–∫—Ü–∏–æ–Ω")
	if state.PeriodID != nil {
		if classScores, err2 := db.GetScoresByClassAndPeriod(database, state.ClassNumber, state.ClassLetter, *state.PeriodID); err2 == nil {
			stu := map[int64]int{}
			for _, sc := range classScores {
				if sc.CategoryID == int64(auctionID) {
					continue
				}
				stu[sc.StudentID] += sc.Points
			}
			for _, tot := range stu {
				collective += int64((tot * 30) / 100)
			}
		}
	} else if state.FromDate != nil && state.ToDate != nil {
		if classScores, err2 := db.GetScoresByClassAndDateRange(database, int(state.ClassNumber), state.ClassLetter, *state.FromDate, *state.ToDate); err2 == nil {
			stu := map[int64]int{}
			for _, sc := range classScores {
				if sc.CategoryID == int64(auctionID) {
					continue
				}
				stu[sc.StudentID] += sc.Points
			}
			for _, tot := range stu {
				collective += int64((tot * 30) / 100)
			}
		}
	}
	return collective, className
}
