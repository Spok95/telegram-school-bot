package handlers

import (
	"database/sql"
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/xuri/excelize/v2"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"time"
)

type ExportFSMState struct {
	Step       int
	ReportType string
	PeriodID   int64
}

var exportStates = make(map[int64]*ExportFSMState)

func StartExportFSM(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	exportStates[chatID] = &ExportFSMState{Step: 1}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ —É—á–µ–Ω–∏–∫—É", "export_type_student"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ –∫–ª–∞—Å—Å—É", "export_type_class"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ —à–∫–æ–ª–µ", "export_type_school"),
		),
	)

	log.Println("üì• –°—Ç–∞—Ä—Ç FSM —ç–∫—Å–ø–æ—Ä—Ç–∞")

	msgOut := tgbotapi.NewMessage(chatID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:")
	msgOut.ReplyMarkup = keyboard
	bot.Send(msgOut)
}

func HandleExportCallback(bot *tgbotapi.BotAPI, database *sql.DB, cq *tgbotapi.CallbackQuery) {
	chatID := cq.Message.Chat.ID
	state, ok := exportStates[chatID]
	if !ok {
		log.Println("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è chatID:", chatID)
		return
	}

	data := cq.Data

	log.Println("‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω callback:", data)

	if data == "export_type_student" || data == "export_type_class" || data == "export_type_school" {
		state.ReportType = data[len("export_type_"):]
		state.Step = 2

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã
		periods, err := db.ListPeriods(database)
		if err != nil || len(periods) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã"))
			delete(exportStates, chatID)
			return
		}
		var buttons [][]tgbotapi.InlineKeyboardButton
		for _, p := range periods {
			label := p.Name
			if p.IsActive {
				label += " ‚úÖ"
			}
			callback := "export_period_" + strconv.FormatInt(p.ID, 10)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(label, callback)))
		}
		bot.Send(tgbotapi.NewMessage(chatID, "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:"))
		bot.Send(tgbotapi.NewMessage(chatID, "üëá"))
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		bot.Send(msg)
		return
	}
	if state.Step == 2 && data[:14] == "export_period_" {
		idStr := data[len("export_period_"):]
		id, _ := strconv.ParseInt(idStr, 10, 64)
		state.PeriodID = id
		state.Step = 3

		bot.Send(tgbotapi.NewMessage(chatID, "‚è≥ –§–æ—Ä–º–∏—Ä—É—é Excel-—Ñ–∞–π–ª..."))

		// –í—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-—Ñ–∞–π–ª–∞
		go func() {
			err := GenerateReport(bot, database, chatID, state.ReportType, state.PeriodID)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: "+err.Error()))
			}
		}()

		delete(exportStates, chatID)
	}
}

func generateExport(scores []models.ScoreWithUser) (string, error) {
	f := excelize.NewFile()
	sheet := "Report"
	f.SetSheetName("Sheet1", sheet)

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{"–§–ò–û —É—á–µ–Ω–∏–∫–∞", "–ö–ª–∞—Å—Å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ë–∞–ª–ª—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö—Ç–æ –¥–æ–±–∞–≤–∏–ª", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"}
	for i, h := range headers {
		cell := fmt.Sprintf("%s1", string(rune('A'+i)))
		f.SetCellValue("Sheet1", cell, h)
	}
	// –î–∞–Ω–Ω—ã–µ
	for i, s := range scores {
		row := i + 2
		_ = f.SetCellValue(sheet, fmt.Sprintf("A%d", row), s.StudentName)
		_ = f.SetCellValue(sheet, fmt.Sprintf("B%d", row), fmt.Sprintf("%d%s", s.ClassNumber, s.ClassLetter))
		_ = f.SetCellValue(sheet, fmt.Sprintf("C%d", row), s.CategoryLabel)
		_ = f.SetCellValue(sheet, fmt.Sprintf("D%d", row), s.Points)
		_ = f.SetCellValue(sheet, fmt.Sprintf("E%d", row), s.Comment)
		_ = f.SetCellValue(sheet, fmt.Sprintf("F%d", row), s.AddedByName)
		_ = f.SetCellValue(sheet, fmt.Sprintf("G%d", row), s.CreatedAt.Format("2006-01-02 15:04"))
	}

	// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
	filename := fmt.Sprintf("report_%d.xlsx", time.Now().Unix())
	path := filepath.Join(os.TempDir(), filename)

	if err := f.SaveAs(path); err != nil {
		return "", err
	}
	return path, nil
}

func GenerateReport(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64, exportType string, periodID int64) error {
	scores, err := db.GetScoresByPeriod(database, int(periodID))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤: %w", err)
	}

	period, err := db.GetPeriodByID(database, int(periodID))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞: %w", err)
	}

	filePath, err := generateExport(scores)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filePath))
	doc.Caption = fmt.Sprintf("üìä –û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: %s", period.Name)

	if _, err := bot.Send(doc); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: %w", err)
	}
	return nil
}
