package handlers

import (
	"database/sql"
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"time"
)

const (
	StepInputName = iota
	StepInputStart
	StepInputEnd
)

type SetPeriodState struct {
	Step      int
	Name      string
	StartDate time.Time
	EndDate   time.Time
}

var periodStates = make(map[int64]*SetPeriodState)

func StartSetPeriodFSM(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID

	// üîÅ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º FSM
	delete(periodStates, chatID)

	// –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ FSM
	periodStates[chatID] = &SetPeriodState{Step: StepInputName}
	bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —Ç—Ä–∏–º–µ—Å—Ç—Ä 2025):"))
}

func HandleSetPeriodInput(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state, ok := periodStates[chatID]
	if !ok {
		return
	}

	switch state.Step {
	case StepInputName:
		state.Name = msg.Text
		state.Step = StepInputStart
		bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"))
	case StepInputStart:
		start, err := parseDate(msg.Text)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
			return
		}
		state.StartDate = start
		state.Step = StepInputEnd
		bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"))
	case StepInputEnd:
		end, err := parseDate(msg.Text)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
			return
		}
		state.EndDate = end

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥
		period := models.Period{
			Name:      state.Name,
			StartDate: state.StartDate,
			EndDate:   state.EndDate,
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç
		if !period.StartDate.Before(period.EndDate) {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			bot.Send(msg)
			delete(periodStates, chatID) // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			return
		}
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è, –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤–∫–ª—é—á–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
		now := time.Now()
		if !now.Before(period.StartDate) && !now.After(period.EndDate) {
			period.IsActive = true
		}

		_, err = db.CreatePeriod(database, period)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞:", err)
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥."))
			return
		}

		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."))
		delete(periodStates, chatID)
	}
}

func GetSetPeriodState(chatID int64) *SetPeriodState {
	return periodStates[chatID]
}

func parseDate(input string) (time.Time, error) {
	layout := "02.01.2006"
	date, err := time.Parse(layout, input)
	if err != nil {
		return time.Time{}, err
	}
	if date.Year() < 2025 {
		return time.Time{}, fmt.Errorf("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Å—è—Ü –µ—Å—Ç—å –≤ –≥–æ–¥—É –∏–ª–∏ –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–µ–≤—Ä–∞–ª—å ‚Äî 28 –∏–ª–∏ 29 –¥–Ω–µ–π).")
	}
	return date, nil
}
