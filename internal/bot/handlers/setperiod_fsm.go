package handlers

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/bot/shared/fsmutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	StepInputName = iota
	StepInputStart
	StepInputEnd
	StepConfirm
	perCancel        = "per_cancel"
	perBackToMenu    = "per_back_menu"  // —Å —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Äî —ç—Ç–æ –≤—ã—Ö–æ–¥ (–∫–∞–∫ –û—Ç–º–µ–Ω–∞)
	perBackToName    = "per_back_name"  // –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
	perBackToStart   = "per_back_start" // –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
	perConfirmCreate = "per_confirm"
)

type SetPeriodState struct {
	Step      int
	Name      string
	StartDate time.Time
	EndDate   time.Time
	MessageID int
}

var periodStates = make(map[int64]*SetPeriodState)

func StartSetPeriodFSM(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	delete(periodStates, chatID)

	state := &SetPeriodState{Step: StepInputName}
	periodStates[chatID] = state

	mk := tgbotapi.NewInlineKeyboardMarkup(
		fsmutil.BackCancelRow(perBackToMenu, perCancel), // –ù–∞–∑–∞–¥ = –≤—ã—Ö–æ–¥, –û—Ç–º–µ–Ω–∞ = –≤—ã—Ö–æ–¥
	)
	perReplace(bot, chatID, state, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —Ç—Ä–∏–º–µ—Å—Ç—Ä 2025):", mk)
}

func HandleSetPeriodInput(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state, ok := periodStates[chatID]
	if !ok {
		return
	}

	switch state.Step {
	case StepInputName:
		state.Name = msg.Text
		state.Step = StepInputStart
		mk := tgbotapi.NewInlineKeyboardMarkup(
			fsmutil.BackCancelRow(perBackToName, perCancel),
		)
		perReplace(bot, chatID, state, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", mk)
	case StepInputStart:
		start, err := parseDate(msg.Text)
		if err != nil {
			mk := tgbotapi.NewInlineKeyboardMarkup(
				fsmutil.BackCancelRow(perBackToName, perCancel),
			)
			perReplace(bot, chatID, state, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", mk)
			return
		}
		state.StartDate = start
		state.Step = StepInputEnd
		mk := tgbotapi.NewInlineKeyboardMarkup(
			fsmutil.BackCancelRow(perBackToStart, perCancel),
		)
		perReplace(bot, chatID, state, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", mk)
	case StepInputEnd:
		end, err := parseDate(msg.Text)
		if err != nil || end.Before(state.StartDate) {
			msgTxt := "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
			if err == nil && end.Before(state.StartDate) {
				msgTxt = "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:"
			}
			mk := tgbotapi.NewInlineKeyboardMarkup(
				fsmutil.BackCancelRow(perBackToStart, perCancel),
			)
			perReplace(bot, chatID, state, msgTxt, mk)
			return
		}
		state.EndDate = end
		state.Step = StepConfirm

		preview := fmt.Sprintf(
			"–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥:\n‚Ä¢ %s\n‚Ä¢ %s ‚Äî %s?",
			state.Name,
			state.StartDate.Format("02.01.2006"),
			state.EndDate.Format("02.01.2006"),
		)
		mk := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", perConfirmCreate),
			),
			fsmutil.BackCancelRow(perBackToStart, perCancel),
		)
		perReplace(bot, chatID, state, preview, mk)
	}
}

func HandleSetPeriodCallback(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	state := periodStates[chatID]
	if state == nil {
		return
	}

	data := cb.Data
	perAnswer(bot, cb)
	// –í—ã—Ö–æ–¥—ã ‚Äî –ø–µ—Ä–≤—ã–º–∏
	if data == perCancel || data == perBackToMenu {
		perClearMarkup(bot, chatID, state)
		perSend(bot, chatID, state, "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", tgbotapi.NewInlineKeyboardMarkup())
		delete(periodStates, chatID)
		return
	}

	switch data {
	case perBackToName:
		state.Step = StepInputName
		mk := tgbotapi.NewInlineKeyboardMarkup(
			fsmutil.BackCancelRow(perBackToMenu, perCancel),
		)
		perReplace(bot, chatID, state, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —Ç—Ä–∏–º–µ—Å—Ç—Ä 2025):", mk)
		return

	case perBackToStart:
		state.Step = StepInputStart
		mk := tgbotapi.NewInlineKeyboardMarkup(
			fsmutil.BackCancelRow(perBackToName, perCancel),
		)
		perReplace(bot, chatID, state, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", mk)
		return

	case perConfirmCreate:
		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
		period := models.Period{
			Name:      state.Name,
			StartDate: state.StartDate,
			EndDate:   state.EndDate,
		}
		if _, err := db.CreatePeriod(ctx, database, period); err != nil {
			mk := tgbotapi.NewInlineKeyboardMarkup(
				fsmutil.BackCancelRow(perBackToStart, perCancel),
			)
			perReplace(bot, chatID, state, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err), mk)
			return
		}
		perClearMarkup(bot, chatID, state)
		perSend(bot, chatID, state, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", tgbotapi.NewInlineKeyboardMarkup())
		delete(periodStates, chatID)
		return
	}
}

func GetSetPeriodState(chatID int64) *SetPeriodState {
	return periodStates[chatID]
}

func parseDate(input string) (time.Time, error) {
	layout := "02.01.2006"
	date, err := time.Parse(layout, input)
	if err != nil {
		return time.Time{}, err
	}
	if date.Year() < 2025 {
		return time.Time{}, fmt.Errorf("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Å—è—Ü –µ—Å—Ç—å –≤ –≥–æ–¥—É –∏–ª–∏ –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–µ–≤—Ä–∞–ª—å ‚Äî 28 –∏–ª–∏ 29 –¥–Ω–µ–π).%w", err)
	}
	return date, nil
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –Ω–∏–∂–µ –≤ —á–∞—Ç–µ
func perReplace(bot *tgbotapi.BotAPI, chatID int64, state *SetPeriodState, text string, mk tgbotapi.InlineKeyboardMarkup) {
	// —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
	if state.MessageID != 0 {
		if _, err := tg.Request(bot, tgbotapi.NewDeleteMessage(chatID, state.MessageID)); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}
	msg := tgbotapi.NewMessage(chatID, text)
	if len(mk.InlineKeyboard) > 0 {
		msg.ReplyMarkup = mk
	}
	sent, _ := tg.Send(bot, msg)
	state.MessageID = sent.MessageID
}

// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (—É–±–∏—Ä–∞–µ—Ç –∫—Ä—É—Ç–∏–ª–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
func perAnswer(bot *tgbotapi.BotAPI, cb *tgbotapi.CallbackQuery) {
	if _, err := tg.Request(bot, tgbotapi.NewCallback(cb.ID, "")); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
func perSend(bot *tgbotapi.BotAPI, chatID int64, st *SetPeriodState, text string, mk tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	if len(mk.InlineKeyboard) > 0 {
		msg.ReplyMarkup = mk
	}
	sent, _ := tg.Send(bot, msg)
	st.MessageID = sent.MessageID
}

// –£–±—Ä–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è (–¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏)
func perClearMarkup(bot *tgbotapi.BotAPI, chatID int64, st *SetPeriodState) {
	if st.MessageID == 0 {
		return
	}
	empty := tgbotapi.NewEditMessageReplyMarkup(chatID, st.MessageID,
		tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}})
	if _, err := tg.Request(bot, empty); err != nil {
		metrics.HandlerErrors.Inc()
	}
}
