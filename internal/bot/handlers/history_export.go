package handlers

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// StartStudentHistoryExcel –£—á–µ–Ω–∏–∫ ‚Üí Excel –∏—Å—Ç–æ—Ä–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func StartStudentHistoryExcel(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	u, err := db.GetUserByTelegramID(ctx, database, chatID)
	if err != nil || u == nil || u.Role == nil || *u.Role != models.Student {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	if !u.IsActive {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	act, err := db.GetActivePeriod(ctx, database)
	if err != nil || act == nil {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	go generateAndSendStudentHistoryExcel(ctx, bot, database, chatID, u.ID, int(*u.ClassNumber), *u.ClassLetter, act.ID, act.Name)
}

// StartParentHistoryExcel –†–æ–¥–∏—Ç–µ–ª—å ‚Üí –æ–¥–∏–Ω —Ä–µ–±—ë–Ω–æ–∫: —Å—Ä–∞–∑—É –æ—Ç—á—ë—Ç; –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –≤—ã–±–æ—Ä —Ä–µ–±—ë–Ω–∫–∞
func StartParentHistoryExcel(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	u, err := db.GetUserByTelegramID(ctx, database, chatID)
	if err != nil || u == nil || u.Role == nil || *u.Role != models.Parent {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	children, err := db.GetChildrenByParentID(ctx, database, u.ID)
	if err != nil || len(children) == 0 {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ—Ç–µ–π.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	if len(children) == 1 {
		if act, _ := db.GetActivePeriod(ctx, database); act != nil {
			c := children[0]
			go generateAndSendStudentHistoryExcel(ctx, bot, database, chatID, c.ID, int(*c.ClassNumber), *c.ClassLetter, act.ID, act.Name)
			return
		}
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	// –í—ã–±–æ—Ä —Ä–µ–±—ë–Ω–∫–∞
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, c := range children {
		label := fmt.Sprintf("%s (%d%s)", c.Name, *c.ClassNumber, *c.ClassLetter)
		cb := fmt.Sprintf("hist_excel_student_%d", c.ID)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(label, cb)))
	}
	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msgOut := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:")
	msgOut.ReplyMarkup = markup
	if _, err := tg.Send(bot, msgOut); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

// HandleHistoryExcelCallback Callback –≤—ã–±–æ—Ä–∞ —Ä–µ–±—ë–Ω–∫–∞
func HandleHistoryExcelCallback(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	data := cb.Data
	if _, err := tg.Request(bot, tgbotapi.NewCallback(cb.ID, "")); err != nil {
		metrics.HandlerErrors.Inc()
	}

	if strings.HasPrefix(data, "hist_excel_student_") {
		idStr := strings.TrimPrefix(data, "hist_excel_student_")
		stuID, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		u, err := db.GetUserByID(ctx, database, stuID)
		if err != nil || u.ID == 0 || u.ClassNumber == nil || u.ClassLetter == nil {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		if act, _ := db.GetActivePeriod(ctx, database); act != nil {
			go generateAndSendStudentHistoryExcel(ctx, bot, database, chatID, stuID, int(*u.ClassNumber), *u.ClassLetter, act.ID, act.Name)
			return
		}
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}
}

// generateAndSendStudentHistoryExcel –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Excel: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π generateStudentReport(...)
func generateAndSendStudentHistoryExcel(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, chatID int64, studentID int64, classNumber int, classLetter string, periodID int64, periodName string) {
	scores, err := db.GetScoresByStudentAndPeriod(ctx, database, studentID, int(periodID))
	if err != nil {
		log.Println("history export: get scores:", err)
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–µ—Ä–∏–æ–¥.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	collective := calcCollectiveForClassPeriod(ctx, database, int64(classNumber), classLetter, periodID) // –±–µ–∑ ¬´–ê—É–∫—Ü–∏–æ–Ω¬ª
	className := fmt.Sprintf("%d%s", classNumber, classLetter)

	filePath, err := generateStudentReport(scores, collective, className, periodName)
	if err != nil {
		log.Println("history export: generate file:", err)
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Excel-—Ñ–∞–π–ª.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filePath))
	doc.Caption = fmt.Sprintf("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ —É—á–µ–Ω–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥: %s", periodName)
	if _, err := tg.Send(bot, doc); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

// calcCollectiveForClassPeriod –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∞—Å—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ (30%), –∏—Å–∫–ª—é—á–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ê—É–∫—Ü–∏–æ–Ω¬ª.
func calcCollectiveForClassPeriod(ctx context.Context, database *sql.DB, classNumber int64, classLetter string, periodID int64) int64 {
	classScores, err := db.GetScoresByClassAndPeriod(ctx, database, classNumber, classLetter, periodID)
	if err != nil {
		return 0
	}
	auctionID := db.GetCategoryIDByName(ctx, database, "–ê—É–∫—Ü–∏–æ–Ω")
	totals := map[int64]int{}
	for _, sc := range classScores {
		if int(sc.CategoryID) == auctionID {
			continue
		}
		totals[sc.StudentID] += sc.Points
	}
	var collective int64 = 0
	for _, t := range totals {
		collective += int64((t * 30) / 100)
	}
	return collective
}
