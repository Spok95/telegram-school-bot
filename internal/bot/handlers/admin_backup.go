package handlers

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/backupclient"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/observability"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleAdminBackup ‚Äî —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –±—ç–∫–∞–ø –≤ sidecar (—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ./backups)
func HandleAdminBackup(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64) {
	user, err := db.GetUserByTelegramID(database, chatID)
	if err != nil || user == nil || user.Role == nil || *user.Role != "admin" {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")); err != nil {
			metrics.HandlerErrors.Inc()
			observability.CaptureErr(err)
		}
		return
	}
	if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚åõ –î–µ–ª–∞—é –±—ç–∫–∞–ø –±–∞–∑—ã‚Ä¶")); err != nil {
		metrics.HandlerErrors.Inc()
		observability.CaptureErr(err)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)
	defer cancel()

	path, err := backupclient.TriggerBackup(ctx)
	if err != nil {
		metrics.HandlerErrors.Inc()
		observability.CaptureErr(err)
		_, _ = tg.Send(bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø: %v", err)))
		return
	}

	_, _ = tg.Send(bot, tgbotapi.NewMessage(chatID, "‚úÖ –ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "+path))
}
