package handlers

// import (
//
//	"database/sql"
//	"fmt"
//	"github.com/Spok95/telegram-school-bot/internal/db"
//	"github.com/Spok95/telegram-school-bot/internal/models"
//	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
//	"log"
//	"strconv"
//	"strings"
//	"time"
//
// )
//
// const (
//
//	StepStudent  = "student"
//	StepCategory = "category"
//	StepValue    = "value"
//	StepComment  = "comment"
//	StepConfirm  = "confirm"
//
// )
//
//	type AddScoreFSM struct {
//		Step       string
//		StudentID  int64
//		CategoryID int64
//		Value      int
//		Comment    string
//	}
//
// var addScoreStates = make(map[int64]*AddScoreFSM)
//func GetAddScoreState(chatID int64) *AddScoreFSM {
//	state, ok := addScoreStates[chatID]
//	if !ok {
//		return nil
//	}
//	return state
//}

//
//// HandleAddScore –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
//func HandleAddScore(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
//	user, err := db.GetUserByTelegramID(database, msg.From.ID)
//	if err != nil || user.Role == nil || (*user.Role != models.Teacher && *user.Role != models.Admin) {
//		sendText(bot, msg.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.")
//		return
//	}
//
//	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
//	students, err := db.GetAllStudents(database)
//	if err != nil || len(students) == 0 {
//		sendText(bot, msg.Chat.ID, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
//		return
//	}
//
//	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
//	addScoreStates[msg.Chat.ID] = &AddScoreFSM{Step: StepStudent}
//
//	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–Ω–æ–ø–∫–∞—Ö
//	var rows [][]tgbotapi.InlineKeyboardButton
//	for _, student := range students {
//		label := fmt.Sprintf("%s", student.Name)
//		if label == "" {
//			label = fmt.Sprintf("ID %d", student.TelegramID)
//		}
//		button := tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("addscore_student_%d", student.TelegramID))
//		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
//	}
//	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
//
//	msgText := tgbotapi.NewMessage(msg.Chat.ID, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:")
//	msgText.ReplyMarkup = keyboard
//	bot.Send(msgText)
//}
//
//func HandleAddScoreCallback(bot *tgbotapi.BotAPI, database *sql.DB, callback *tgbotapi.CallbackQuery) {
//	state, ok := addScoreStates[callback.Message.Chat.ID]
//	if !ok || state.Step != StepStudent {
//		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥."))
//		return
//	}
//	if strings.HasPrefix(callback.Data, "addscore_student_") {
//		idStr := strings.TrimPrefix(callback.Data, "addscore_student_")
//		studentID, err := strconv.ParseInt(idStr, 10, 64)
//		if err != nil {
//			bot.Request(tgbotapi.NewCallback(callback.ID, "‚ùå –û—à–∏–±–∫–∞ ID —É—á–µ–Ω–∏–∫–∞"))
//			return
//		}
//
//		state.StudentID = studentID
//		state.Step = StepCategory
//
//		// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//		catList, err := db.GetAllCategories(database)
//		if err != nil {
//			bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã."))
//			return
//		}
//		var rows [][]tgbotapi.InlineKeyboardButton
//		for _, c := range catList {
//			data := fmt.Sprintf("addscore_category_%d", c.ID)
//			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
//				tgbotapi.NewInlineKeyboardButtonData(c.Name, data)))
//		}
//
//		msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
//		msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{InlineKeyboard: rows}
//		bot.Send(msg)
//	}
//}
//
//func HandleAddScoreCategory(bot *tgbotapi.BotAPI, database *sql.DB, callback *tgbotapi.CallbackQuery) {
//	chatID := callback.Message.Chat.ID
//	data := callback.Data
//
//	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
//	state, ok := addScoreStates[chatID]
//	if !ok || state.Step != StepCategory {
//		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥."))
//		return
//	}
//
//	idStr := strings.TrimPrefix(data, "addscore_category_")
//	catID, err := strconv.Atoi(idStr)
//	if err != nil {
//		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."))
//		return
//	}
//
//	state.CategoryID = int64(catID)
//	state.Step = StepValue
//
//	levels, err := db.GetLevelsByCategoryID(database, catID)
//	if err != nil || len(levels) == 0 {
//		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ—Ç —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."))
//		return
//	}
//
//	var rows [][]tgbotapi.InlineKeyboardButton
//	for _, level := range levels {
//		btn := tgbotapi.NewInlineKeyboardButtonData(
//			fmt.Sprintf("%s (%d)", level.Label, level.Value),
//			fmt.Sprintf("addscore_level_%d", level.ID),
//		)
//		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
//	}
//
//	msg := tgbotapi.NewMessage(chatID, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–∞–ª–ª–æ–≤:")
//	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
//	bot.Send(msg)
//	bot.Request(tgbotapi.NewCallback(callback.ID, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞"))
//}
//
//func HandleAddScoreLevel(bot *tgbotapi.BotAPI, database *sql.DB, callback *tgbotapi.CallbackQuery) {
//	chatID := callback.Message.Chat.ID
//	state, ok := addScoreStates[chatID]
//	if !ok || state.Step != StepValue {
//		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥."))
//		return
//	}
//
//	idStr := strings.TrimPrefix(callback.Data, "addscore_level_")
//	levelID, err := strconv.Atoi(idStr)
//	if err != nil {
//		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–≤–Ω—è."))
//		return
//	}
//
//	level, err := db.GetLevelByID(database, levelID)
//	if err != nil {
//		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω."))
//		return
//	}
//
//	state.Value = level.Value
//	state.Step = StepComment
//
//	bot.Send(tgbotapi.NewMessage(chatID, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:"))
//	bot.Request(tgbotapi.NewCallback(callback.ID, "–£—Ä–æ–≤–µ–Ω—å –≤—ã–±—Ä–∞–Ω"))
//}
//
//func HandleAddScoreValue(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
//	chatID := msg.Chat.ID
//	text := msg.Text
//
//	state, ok := addScoreStates[chatID]
//	if !ok || state.Step != StepValue {
//		return
//	}
//
//	points, err := strconv.Atoi(text)
//	if err != nil {
//		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."))
//		return
//	}
//
//	state.Value = points
//	state.Step = StepComment
//
//	bot.Send(tgbotapi.NewMessage(chatID, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:"))
//}
//
//func HandleAddScoreComment(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
//	chatID := msg.Chat.ID
//	comment := strings.TrimSpace(msg.Text)
//
//	state, ok := addScoreStates[chatID]
//	if !ok || state.Step != StepComment {
//		bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."))
//		return
//	}
//	state.Comment = comment
//	// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
//	state.Step = StepConfirm
//	addScoreStates[chatID] = state
//
//	text := fmt.Sprintf("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ:\n\n"+
//		"üë§ –£—á–µ–Ω–∏–∫: %d\n"+
//		"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %d\n"+
//		"üíØ –ë–∞–ª–ª—ã: %d\n"+
//		"üìù –ü—Ä–∏—á–∏–Ω–∞: %s",
//		state.StudentID,
//		state.CategoryID,
//		state.Value,
//		state.Comment,
//	)
//
//	confirmButtons := tgbotapi.NewInlineKeyboardMarkup(
//		tgbotapi.NewInlineKeyboardRow(
//			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "addscore_confirm"),
//			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "addscore_cancel"),
//		),
//	)
//
//	msgToSend := tgbotapi.NewMessage(chatID, text)
//	msgToSend.ParseMode = "Markdown"
//	msgToSend.ReplyMarkup = confirmButtons
//	if _, err := bot.Send(msgToSend); err != nil {
//		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", err)
//	}
//}
//
//func HandleAddScoreConfirmCallback(bot *tgbotapi.BotAPI, database *sql.DB, callback *tgbotapi.CallbackQuery) {
//	chatID := callback.Message.Chat.ID
//	state, ok := addScoreStates[chatID]
//	if !ok || state.Step != StepConfirm {
//		bot.Request(tgbotapi.NewCallback(callback.ID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥."))
//		return
//	}
//
//	score := models.Score{
//		StudentID:  state.StudentID,
//		CategoryID: state.CategoryID,
//		Points:     state.Value,
//		Type:       "add",
//		Comment:    &state.Comment,
//		Status:     "approved",
//		CreatedBy:  chatID,
//		CreatedAt:  time.Now(),
//	}
//
//	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ
//	err := db.AddScore(database, score)
//	if err != nil {
//		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤."))
//		log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É:", err)
//		return
//	}
//
//	bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!"))
//	delete(addScoreStates, chatID)
//}
//
//func HandleAddScoreCancelCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
//	chatID := callback.Message.Chat.ID
//	delete(addScoreStates, chatID)
//	bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
//}
//
//func sendText(bot *tgbotapi.BotAPI, chatID int64, text string) {
//	msg := tgbotapi.NewMessage(chatID, text)
//	bot.Send(msg)
//}
