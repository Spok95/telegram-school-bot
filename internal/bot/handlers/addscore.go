package handlers

import (
	"database/sql"
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
	"strings"
)

type AddScoreFSM struct {
	Step      string
	StudentID int64
	Category  string
	Value     int
	Comment   string
}

var addScoreStates = make(map[int64]*AddScoreFSM)

// HandleAddScore –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
func HandleAddScore(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	user, err := db.GetUserByTelegramID(database, msg.From.ID)
	if err != nil || user.Role == nil || (*user.Role != models.Teacher && *user.Role != models.Admin) {
		sendText(bot, msg.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
	students, err := db.GetAllStudents(database)
	if err != nil || len(students) == 0 {
		sendText(bot, msg.Chat.ID, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	addScoreStates[msg.Chat.ID] = &AddScoreFSM{Step: "student"}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–Ω–æ–ø–∫–∞—Ö
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, student := range students {
		label := fmt.Sprintf("%s", student.Name)
		if label == "" {
			label = fmt.Sprintf("ID %d", student.TelegramID)
		}
		button := tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("addscore_student_%d", student.TelegramID))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msgText := tgbotapi.NewMessage(msg.Chat.ID, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:")
	msgText.ReplyMarkup = keyboard
	bot.Send(msgText)
}

func HandleAddScoreCallback(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	state, ok := addScoreStates[cb.Message.Chat.ID]
	if !ok || state.Step != "student" {
		bot.Request(tgbotapi.NewCallback(cb.ID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥."))
		return
	}
	if strings.HasPrefix(cb.Data, "addscore_student_") {
		idStr := strings.TrimPrefix(cb.Data, "addscore_student_")
		studentID, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			bot.Request(tgbotapi.NewCallback(cb.ID, "‚ùå –û—à–∏–±–∫–∞ ID —É—á–µ–Ω–∏–∫–∞"))
			return
		}

		state.StudentID = studentID
		state.Step = "category"

		// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		categories := []string{"–†–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ", "–ö—É—Ä—Å—ã –ø–æ –≤—ã–±–æ—Ä—É", "–í–Ω–µ—É—Ä–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏", "–î–µ–∂—É—Ä—Å—Ç–≤–æ"}
		var rows [][]tgbotapi.InlineKeyboardButton
		for _, c := range categories {
			data := fmt.Sprintf("addscore_category_%s", c)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(c, data)))
		}

		msg := tgbotapi.NewEditMessageText(cb.Message.Chat.ID, cb.Message.MessageID, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
		msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{InlineKeyboard: rows}
		bot.Send(msg)
	}
}
