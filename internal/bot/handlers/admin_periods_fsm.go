package handlers

import (
	"database/sql"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/bot/shared/fsmutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type PeriodsFSMState struct {
	MessageID int
	Step      int
	Editing   *EditPeriodState
}

type EditPeriodState struct {
	PeriodID  int
	Name      string
	StartDate time.Time
	EndDate   time.Time
	IsActive  bool
	MessageID int
	Step      int
}

var periodsStates = map[int64]*PeriodsFSMState{}

const (
	perAdmCancel   = "peradm_cancel"
	perAdmBack     = "peradm_back"
	perAdmCreate   = "peradm_create"
	perAdmEditPref = "peradm_edit_"

	editStepAskStart = 1
	editStepAskEnd   = 2
	editStepConfirm  = 3
)

// StartAdminPeriods –°—Ç–∞—Ä—Ç: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ + ¬´–°–æ–∑–¥–∞—Ç—å / –ò–∑–º–µ–Ω–∏—Ç—å¬ª
func StartAdminPeriods(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state := &PeriodsFSMState{}
	periodsStates[chatID] = state
	showPeriodsList(bot, database, chatID, state)
}

func showPeriodsList(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64, st *PeriodsFSMState) {
	per, _ := db.ListPeriods(database)
	text := "üìÖ –ü–µ—Ä–∏–æ–¥—ã:\n"
	now := time.Now()
	for _, p := range per {
		tag := ""
		switch {
		case p.IsActive:
			tag = " ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π"
		case p.StartDate.After(now):
			tag = " ‚Äî –±—É–¥—É—â–∏–π"
		case p.EndDate.Before(now):
			tag = " ‚Äî –ø—Ä–æ—à–µ–¥—à–∏–π"
		}

		text += fmt.Sprintf("‚Ä¢ %s (%s‚Äì%s)%s\n", p.Name, p.StartDate.Format("02.01.2006"), p.EndDate.Format("02.01.2006"), tag)
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, p := range per {
		cb := fmt.Sprintf("%s%d", perAdmEditPref, p.ID)
		label := fmt.Sprintf("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å: %s", p.Name)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(label, cb)))
	}
	rows = append(rows,
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥", perAdmCreate)),
		tgbotapi.NewInlineKeyboardRow(fsmutil.BackCancelRow(perAdmBack, perAdmCancel)...),
	)
	mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msgOut := tgbotapi.NewMessage(chatID, text)
	msgOut.ReplyMarkup = mk
	sent, _ := tg.Send(bot, msgOut)
	st.MessageID = sent.MessageID
}

// HandleAdminPeriodsCallback –∫–æ–ª–ª–±—ç–∫–∏ —Å–ø–∏—Å–∫–∞
func HandleAdminPeriodsCallback(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	st := periodsStates[chatID]
	if st == nil {
		return
	}
	if _, err := tg.Request(bot, tgbotapi.NewCallback(cb.ID, "")); err != nil {
		metrics.HandlerErrors.Inc()
	}
	data := cb.Data

	switch data {
	case perAdmCancel:
		disable := tgbotapi.NewEditMessageReplyMarkup(chatID, st.MessageID, tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}})
		if _, err := tg.Request(bot, disable); err != nil {
			metrics.HandlerErrors.Inc()
		}
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		delete(periodsStates, chatID)
		return
	case perAdmBack:
		if st.Editing != nil {
			showEditCard(bot, chatID, st.Editing)
			return
		}
		disable := tgbotapi.NewEditMessageReplyMarkup(chatID, st.MessageID, tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}})
		if _, err := tg.Request(bot, disable); err != nil {
			metrics.HandlerErrors.Inc()
		}
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		delete(periodsStates, chatID)
		return
	case perAdmCreate:
		delete(periodsStates, chatID)
		StartSetPeriodFSM(bot, cb.Message) // –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
		return
	case perAdmEditPref:
		idStr := strings.TrimPrefix(data, perAdmEditPref)
		pid64, err := strconv.ParseInt(strings.TrimSpace(idStr), 10, 64)

		fmt.Println()
		fmt.Println("pid64, err := strconv.ParseInt(strings.TrimSpace(idStr), 10, 64)", pid64)
		fmt.Println()

		if err != nil || pid64 <= 0 {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		p, err := db.GetPeriodByID(database, int(pid64))

		fmt.Println()
		fmt.Println("db.GetPeriodByID(database, int(pid64))", p)
		fmt.Println()

		if errors.Is(err, sql.ErrNoRows) || p == nil {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		if err != nil {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ë–î: %v", err))); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		ep := &EditPeriodState{PeriodID: int(pid64), Name: p.Name, StartDate: p.StartDate, EndDate: p.EndDate, IsActive: p.IsActive}
		st.Editing = ep
		showEditCard(bot, chatID, ep)
		return
	}
}

func showEditCard(bot *tgbotapi.BotAPI, chatID int64, ep *EditPeriodState) {
	tag := "–ø—Ä–æ—à–µ–¥—à–∏–π"
	now := time.Now()
	if ep.IsActive {
		tag = "–∞–∫—Ç–∏–≤–Ω—ã–π"
	} else if ep.StartDate.After(now) {
		tag = "–±—É–¥—É—â–∏–π"
	}
	txt := fmt.Sprintf(
		"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞: %s\n%s‚Äì%s (%s)\n\n–ü—Ä–∞–≤–∏–ª–∞:\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π: –Ω–∞—á–∞–ª–æ –º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è; –∫–æ–Ω–µ—Ü ‚Äî –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è.\n‚Ä¢ –ë—É–¥—É—â–∏–π: –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –æ–±–µ –¥–∞—Ç—ã.\n‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∏–π: –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è.",
		ep.Name, ep.StartDate.Format("02.01.2006"), ep.EndDate.Format("02.01.2006"), tag,
	)
	var rows [][]tgbotapi.InlineKeyboardButton
	if ep.IsActive {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü", "peradm_edit_end")))
	} else if ep.EndDate.After(now) || ep.StartDate.After(now) {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã", "peradm_edit_both")))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(fsmutil.BackCancelRow(perAdmBack, perAdmCancel)...))
	edit := tgbotapi.NewEditMessageText(chatID, periodsStates[chatID].MessageID, txt)
	edit.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{InlineKeyboard: rows}
	if _, err := tg.Send(bot, edit); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

// HandleAdminPeriodsText –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–≥–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func HandleAdminPeriodsText(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	st := periodsStates[chatID]
	if st == nil || st.Editing == nil {
		return
	}
	ep := st.Editing
	switch ep.Step {
	case editStepAskStart:
		d, err := parseDate(msg.Text)
		if err != nil {
			mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow(perAdmBack, perAdmCancel))
			m := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
			m.ReplyMarkup = mk
			if _, err := tg.Send(bot, m); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		ep.StartDate = d
		ep.Step = editStepAskEnd
		mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow(perAdmBack, perAdmCancel))
		m := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
		m.ReplyMarkup = mk
		if _, err := tg.Send(bot, m); err != nil {
			metrics.HandlerErrors.Inc()
		}
	case editStepAskEnd:
		d, err := parseDate(msg.Text)
		if err != nil {
			mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow(perAdmBack, perAdmCancel))
			m := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ (–î–î.–ú–ú.–ì–ì–ì–ì):")
			m.ReplyMarkup = mk
			if _, err := tg.Send(bot, m); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		ep.EndDate = d
		if err := validateEditDates(ep); err != nil {
			mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow(perAdmBack, perAdmCancel))
			m := tgbotapi.NewMessage(chatID, err.Error())
			m.ReplyMarkup = mk
			if _, err := tg.Send(bot, m); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		ep.Step = editStepConfirm
		txt := fmt.Sprintf("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç:\n%s ‚Äî %s", ep.StartDate.Format("02.01.2006"), ep.EndDate.Format("02.01.2006"))
		rows := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "peradm_save")),
			fsmutil.BackCancelRow(perAdmBack, perAdmCancel),
		}
		mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
		m := tgbotapi.NewMessage(chatID, txt)
		m.ReplyMarkup = mk
		if _, err := tg.Send(bot, m); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}
}

// HandleAdminPeriodsEditCallback –ö–æ–ª–±—ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
func HandleAdminPeriodsEditCallback(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	st := periodsStates[chatID]
	if st == nil || st.Editing == nil {
		return
	}
	ep := st.Editing
	if _, err := tg.Request(bot, tgbotapi.NewCallback(cb.ID, "")); err != nil {
		metrics.HandlerErrors.Inc()
	}
	switch cb.Data {
	case "peradm_edit_end":
		ep.Step = editStepAskEnd
		mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow(perAdmBack, perAdmCancel))
		m := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
		m.ReplyMarkup = mk
		if _, err := tg.Send(bot, m); err != nil {
			metrics.HandlerErrors.Inc()
		}
	case "peradm_edit_both":
		ep.Step = editStepAskStart
		mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow(perAdmBack, perAdmCancel))
		m := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
		m.ReplyMarkup = mk
		if _, err := tg.Send(bot, m); err != nil {
			metrics.HandlerErrors.Inc()
		}
	case "peradm_save":
		if err := validateEditDates(ep); err != nil {
			mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow(perAdmBack, perAdmCancel))
			m := tgbotapi.NewMessage(chatID, err.Error())
			m.ReplyMarkup = mk
			if _, err := tg.Send(bot, m); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		if err := db.UpdatePeriod(database, models.Period{
			ID:        int64(ep.PeriodID),
			Name:      ep.Name,
			StartDate: ep.StartDate,
			EndDate:   ep.EndDate,
			IsActive:  false,
		}); err != nil {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		_ = db.SetActivePeriod(database) // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚úÖ –ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		if p, _ := db.GetPeriodByID(database, ep.PeriodID); p != nil {
			ep.StartDate, ep.EndDate, ep.IsActive = p.StartDate, p.EndDate, p.IsActive
		}
		showEditCard(bot, chatID, ep)
	}
}

func validateEditDates(ep *EditPeriodState) error {
	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø–æ –¥–∞—Ç–µ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏), –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ.
	normalize := func(t time.Time) time.Time {
		loc := time.Local
		return time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, loc)
	}
	today := normalize(time.Now())
	start := normalize(ep.StartDate)
	end := normalize(ep.EndDate)

	// –ü—Ä–æ—à–µ–¥—à–∏–π –ø–µ—Ä–∏–æ–¥ ‚Äî –º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è –≤–æ–≤—Å–µ.
	if !ep.IsActive && end.Before(today) {
		return fmt.Errorf("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã")
	}
	// –ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥: –∫–æ–Ω–µ—Ü –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã (–º–æ–∂–Ω–æ = —Å–µ–≥–æ–¥–Ω—è).
	if ep.IsActive && end.Before(today) {
		return fmt.Errorf("‚ùå –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π")
	}
	// –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –∫–æ–Ω–µ—Ü –Ω–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞.
	if start.After(end) {
		return fmt.Errorf("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
	}
	return nil
}

// PeriodsFSMActive helper –¥–ª—è dispatcher
func PeriodsFSMActive(chatID int64) (*PeriodsFSMState, bool) {
	st, ok := periodsStates[chatID]
	return st, ok
}
