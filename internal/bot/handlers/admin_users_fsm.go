package handlers

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"

	"github.com/Spok95/telegram-school-bot/internal/bot/shared/fsmutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type adminUsersState struct {
	Step           int
	Query          string
	SelectedUserID int64
	PendingRole    string
	ClassNumber    int64
	ClassLetter    string
	MessageID      int
}

var adminUsersStates = map[int64]*adminUsersState{}

func GetAdminUsersState(chatID int64) *adminUsersState { return adminUsersStates[chatID] }

// ‚îÄ‚îÄ‚îÄ ENTRY

func StartAdminUsersFSM(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	adminUsersStates[chatID] = &adminUsersState{Step: 1}
	edit := tgbotapi.NewMessage(chatID, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7–ê) –¥–ª—è –ø–æ–∏—Å–∫–∞:")
	edit.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		fsmutil.BackCancelRow("admusr_back_to_menu", "admusr_cancel"))
	sent, _ := bot.Send(edit)
	adminUsersStates[chatID].MessageID = sent.MessageID
}

// ‚îÄ‚îÄ‚îÄ TEXT HANDLER

func HandleAdminUsersText(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state := adminUsersStates[chatID]
	if state == nil {
		return
	}

	switch state.Step {
	case 1:
		state.Query = strings.TrimSpace(msg.Text)
		users, err := db.FindUsersByQuery(database, state.Query, 50)
		if err != nil || len(users) == 0 {
			edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
			mk := tgbotapi.NewInlineKeyboardMarkup(
				fsmutil.BackCancelRow("admusr_back_to_menu", "admusr_cancel"))
			edit.ReplyMarkup = &mk
			bot.Send(edit)
			return
		}
		text := fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ:", len(users))
		var rows [][]tgbotapi.InlineKeyboardButton
		for _, u := range users {
			labelRole := "(–Ω–µ—Ç —Ä–æ–ª–∏)"
			if u.Role != nil {
				labelRole = string(*u.Role)
			}
			labelClass := ""
			if u.ClassNumber != nil && u.ClassLetter != nil {
				labelClass = fmt.Sprintf(" ‚Ä¢ %d%s", int(*u.ClassNumber), *u.ClassLetter)
			}
			btn := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s ‚Ä¢ %s%s", u.Name, labelRole, labelClass), fmt.Sprintf("admusr_pick_%d", u.ID))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
		}
		rows = append(rows, fsmutil.BackCancelRow("admusr_back_to_search", "admusr_cancel"))
		mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, text)
		edit.ReplyMarkup = &mk
		bot.Send(edit)
		state.Step = 2
	case 3:
		num, let, ok := parseClass(msg.Text)
		if !ok {
			edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 7–ê, 10–ë, 11–ì.\n–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å.")
			bot.Send(edit)
			return
		}
		state.ClassNumber, state.ClassLetter = num, let

		question := fmt.Sprintf("–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ –£—á–µ–Ω–∏–∫ (%d%s)?", state.ClassNumber, state.ClassLetter)
		rows := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "admusr_apply_student"),
			),
			fsmutil.BackCancelRow("admusr_back_to_role", "admusr_cancel"),
		}
		mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, question)
		edit.ReplyMarkup = &mk
		bot.Send(edit)
		state.Step = 4
		return
	}
}

// ‚îÄ‚îÄ‚îÄ CALLBACK HANDLER

func HandleAdminUsersCallback(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	state := adminUsersStates[chatID]
	if state == nil {
		return
	}
	data := cb.Data

	// –û—Ç–º–µ–Ω–∞
	if data == "admusr_cancel" {
		fsmutil.DisableMarkup(bot, chatID, state.MessageID)
		bot.Send(tgbotapi.NewEditMessageText(chatID, state.MessageID, "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ."))
		delete(adminUsersStates, chatID)
		return
	}

	// –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
	if strings.HasPrefix(data, "admusr_pick_") {
		var uid int64
		fmt.Sscanf(data, "admusr_pick_%d", &uid)
		state.SelectedUserID = uid

		rows := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–£—á–µ–Ω–∏–∫", "admusr_set_student"),
				tgbotapi.NewInlineKeyboardButtonData("–†–æ–¥–∏—Ç–µ–ª—å", "admusr_set_parent"),
				tgbotapi.NewInlineKeyboardButtonData("–£—á–∏—Ç–µ–ª—å", "admusr_set_teacher"),
				tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "admusr_set_administration"),
				tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω", "admusr_set_admin"),
			),
		}

		rows = append(rows, fsmutil.BackCancelRow("admusr_back_to_list", "admusr_cancel"))
		mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:")
		edit.ReplyMarkup = &mk
		bot.Send(edit)
		return
	}

	if strings.HasPrefix(data, "admusr_set_") {
		role := strings.TrimPrefix(data, "admusr_set_")
		state.PendingRole = role

		// –î–ª—è —É—á–µ–Ω–∏–∫–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏–º –∫–ª–∞—Å—Å
		if role == "student" {
			mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow("admusr_back_to_role", "admusr_cancel"))
			edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7–ê:")
			edit.ReplyMarkup = &mk
			bot.Send(edit)
			state.Step = 3
			return
		}
		// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
		rows := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "admusr_apply_"+role),
			),
			fsmutil.BackCancelRow("admusr_back_to_role", "admusr_cancel"),
		}
		mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, fmt.Sprintf("–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ ¬´%s¬ª?", humanRole(role)))
		edit.ReplyMarkup = &mk
		bot.Send(edit)
		state.Step = 4
		return
	}
	// –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–æ–±—â–∏–π —Å–ª—É—á–∞–π) –ò–õ–ò –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è student
	if strings.HasPrefix(data, "admusr_apply_") || data == "admusr_apply_student" {
		role := strings.TrimPrefix(data, "admusr_apply_")
		if role == "" {
			role = state.PendingRole
		}
		admin, _ := db.GetUserByTelegramID(database, chatID)
		if admin == nil || admin.Role == nil || (*admin.Role != "admin") {
			bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç –ø—Ä–∞–≤."))
			return
		}

		var err error
		if role == "student" || state.PendingRole == "student" {
			err = db.ChangeRoleToStudentWithAudit(database, state.SelectedUserID, state.ClassNumber, state.ClassLetter, admin.ID)
		} else {
			err = db.ChangeRoleWithCleanup(database, state.SelectedUserID, role, admin.ID)
		}
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏: "+err.Error()))
			return
		}

		// —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		target, _ := db.GetUserByID(database, state.SelectedUserID)
		txt := fmt.Sprintf("–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´%s¬ª. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é.", humanRole(role))
		bot.Send(tgbotapi.NewMessage(target.TelegramID, txt))

		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
		bot.Send(edit)
		delete(adminUsersStates, chatID)
		return
	}

	// ===== –ù–∞–∑–∞–¥
	if data == "admusr_back_to_role" {
		// –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
		rows := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–£—á–µ–Ω–∏–∫", "admusr_set_student"),
				tgbotapi.NewInlineKeyboardButtonData("–†–æ–¥–∏—Ç–µ–ª—å", "admusr_set_parent"),
				tgbotapi.NewInlineKeyboardButtonData("–£—á–∏—Ç–µ–ª—å", "admusr_set_teacher"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "admusr_set_administration"),
				tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω", "admusr_set_admin"),
			),
			fsmutil.BackCancelRow("admusr_back_to_list", "admusr_cancel"),
		}
		mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:")
		edit.ReplyMarkup = &mk
		bot.Send(edit)
		state.Step = 2
		return
	}
	if data == "admusr_back_to_list" {
		// –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ state.query
		users, _ := db.FindUsersByQuery(database, state.Query, 50)
		text := fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ:", len(users))
		var rows [][]tgbotapi.InlineKeyboardButton
		for _, u := range users {
			labelRole := "(–Ω–µ—Ç —Ä–æ–ª–∏)"
			if u.Role != nil {
				labelRole = string(*u.Role)
			}
			labelClass := ""
			if u.ClassNumber != nil && u.ClassLetter != nil {
				labelClass = fmt.Sprintf(" ‚Ä¢ %d%s", int(*u.ClassNumber), *u.ClassLetter)
			}
			btn := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s ‚Ä¢ %s%s", u.Name, labelRole, labelClass),
				fmt.Sprintf("admusr_pick_%d", u.ID),
			)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
		}
		rows = append(rows, fsmutil.BackCancelRow("admusr_back_to_search", "admusr_cancel"))
		mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, text)
		edit.ReplyMarkup = &mk
		bot.Send(edit)
		state.Step = 2
		return
	}
	// ‚Üê –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –∑–∞–ø—Ä–æ—Å–∞ (–∏–∑ —Å–ø–∏—Å–∫–∞)
	if data == "admusr_back_to_search" {
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID,
			"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7–ê) –¥–ª—è –ø–æ–∏—Å–∫–∞:")
		mk := tgbotapi.NewInlineKeyboardMarkup(fsmutil.BackCancelRow("admusr_back_to_menu", "admusr_cancel"))
		edit.ReplyMarkup = &mk
		bot.Send(edit)
		state.Step = 1
		return
	}

	// ‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é (–∫–∞–∫ –û—Ç–º–µ–Ω–∞) ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ —Å —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞.
	if data == "admusr_back_to_menu" {
		fsmutil.DisableMarkup(bot, chatID, state.MessageID)
		bot.Send(tgbotapi.NewEditMessageText(chatID, state.MessageID, "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ."))
		delete(adminUsersStates, chatID)
		return
	}
}

func humanRole(role string) string {
	switch role {
	case "student":
		return "–£—á–µ–Ω–∏–∫"
	case "parent":
		return "–†–æ–¥–∏—Ç–µ–ª—å"
	case "teacher":
		return "–£—á–∏—Ç–µ–ª—å"
	case "administration":
		return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
	case "admin":
		return "–ê–¥–º–∏–Ω"
	default:
		return role
	}
}

// parseClass: –ø–∞—Ä—Å–∏—Ç –≤–≤–æ–¥ –≤—Ä–æ–¥–µ "7–ê", "10–ë", –¥–æ–ø—É—Å–∫–∞–µ—Ç –ª–∞—Ç–∏–Ω–∏—Ü—É (A‚Üí–ê –∏ —Ç.–ø.), –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
func parseClass(s string) (int64, string, bool) {
	s = strings.TrimSpace(s)
	if s == "" {
		return 0, "", false
	}
	// –Ω–∞–π—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤—É—é —á–∞—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
	r := []rune(s)
	i := 0
	for i < len(r) && r[i] >= '0' && r[i] <= '9' {
		i++
	}
	if i == 0 || i >= len(r) {
		return 0, "", false
	}
	numStr := string(r[:i])
	letter := strings.ToUpper(string(r[i:]))

	// –ª–∞—Ç–∏–Ω–∏—Ü–∞ -> –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –±—É–∫–≤ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞)
	rep := map[rune]rune{
		'A': '–ê', 'B': '–í', 'E': '–ï', 'K': '–ö', 'M': '–ú',
		'H': '–ù', 'O': '–û', 'P': '–†', 'C': '–°', 'T': '–¢', 'X': '–•',
	}
	lr := []rune(letter)
	if len(lr) != 1 {
		return 0, "", false
	}
	if rr, ok := rep[lr[0]]; ok {
		lr[0] = rr
	}
	letter = string(lr[0])

	num, err := strconv.ParseInt(numStr, 10, 64)
	if err != nil {
		return 0, "", false
	}
	return num, letter, true
}
