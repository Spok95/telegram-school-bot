package handlers

import (
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/xuri/excelize/v2"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"time"
)

// üìÑ –ü–æ —É—á–µ–Ω–∏–∫—É
func generateStudentReport(scores []models.ScoreWithUser) (string, error) {
	f := excelize.NewFile()
	sheet := "Report"
	f.SetSheetName("Sheet1", sheet)

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{"–§–ò–û —É—á–µ–Ω–∏–∫–∞", "–ö–ª–∞—Å—Å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ë–∞–ª–ª—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö—Ç–æ –¥–æ–±–∞–≤–∏–ª", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"}
	for i, h := range headers {
		cell := fmt.Sprintf("%s1", string(rune('A'+i)))
		f.SetCellValue(sheet, cell, h)
	}
	// –î–∞–Ω–Ω—ã–µ
	for i, s := range scores {
		row := i + 2
		_ = f.SetCellValue(sheet, fmt.Sprintf("A%d", row), s.StudentName)
		_ = f.SetCellValue(sheet, fmt.Sprintf("B%d", row), fmt.Sprintf("%d%s", s.ClassNumber, s.ClassLetter))
		_ = f.SetCellValue(sheet, fmt.Sprintf("C%d", row), s.CategoryLabel)
		_ = f.SetCellValue(sheet, fmt.Sprintf("D%d", row), s.Points)
		if s.Comment != nil {
			_ = f.SetCellValue(sheet, fmt.Sprintf("E%d", row), *s.Comment)
		} else {
			_ = f.SetCellValue(sheet, fmt.Sprintf("E%d", row), "")
		}
		_ = f.SetCellValue(sheet, fmt.Sprintf("F%d", row), s.AddedByName)
		_ = f.SetCellValue(sheet, fmt.Sprintf("G%d", row), s.CreatedAt.Format("02.01.2006 15:04"))
	}

	// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
	filename := fmt.Sprintf("student_report_%d.xlsx", time.Now().Unix())
	path := filepath.Join(os.TempDir(), filename)

	err := f.SaveAs(path)
	return path, err
}

// üè´ –ü–æ –∫–ª–∞—Å—Å—É
func generateClassReport(scores []models.ScoreWithUser) (string, error) {
	type studentGroup struct {
		Name         string
		Total        int
		Class        string
		Contribution int
	}

	studentMap := make(map[string]*studentGroup)
	for _, s := range scores {
		key := s.StudentName
		if _, exists := studentMap[key]; !exists {
			studentMap[key] = &studentGroup{
				Name:  s.StudentName,
				Class: fmt.Sprintf("%d%s", s.ClassNumber, s.ClassLetter),
			}
		}
		studentMap[key].Total += s.Points
	}

	for _, s := range scores {
		key := s.StudentName
		if s.CategoryLabel != "–ê—É–∫—Ü–∏–æ–Ω" {
			studentMap[key].Contribution += s.Points
		}
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –≤–∫–ª–∞–¥
	for _, s := range studentMap {
		s.Contribution = s.Contribution * 30 / 100
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
	var groups []studentGroup
	for _, v := range studentMap {
		groups = append(groups, *v)
	}
	sort.Slice(groups, func(i, j int) bool {
		return strings.ToLower(groups[i].Name) < strings.ToLower(groups[j].Name)
	})

	f := excelize.NewFile()
	sheet := "ClassReport"
	f.SetSheetName("Sheet1", sheet)

	headers := []string{"–§–ò–û —É—á–µ–Ω–∏–∫–∞", "–ö–ª–∞—Å—Å", "–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª", "–í–∫–ª–∞–¥ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"}
	for i, h := range headers {
		cell := fmt.Sprintf("%s1", string(rune('A'+i)))
		f.SetCellValue(sheet, cell, h)
	}
	for i, g := range groups {
		row := i + 2
		_ = f.SetCellValue(sheet, fmt.Sprintf("A%d", row), g.Name)
		_ = f.SetCellValue(sheet, fmt.Sprintf("B%d", row), g.Class)
		_ = f.SetCellValue(sheet, fmt.Sprintf("C%d", row), g.Total)
		_ = f.SetCellValue(sheet, fmt.Sprintf("D%d", row), g.Contribution)
	}

	filename := fmt.Sprintf("class_report_%d.xlsx", time.Now().Unix())
	path := filepath.Join(os.TempDir(), filename)
	err := f.SaveAs(path)
	return path, err
}

// üè´ –ü–æ —à–∫–æ–ª–µ
func generateSchoolReport(scores []models.ScoreWithUser) (string, error) {
	type classStat struct {
		Name   string
		Total  int
		Rating int
	}
	classMap := make(map[string]*classStat)
	for _, s := range scores {
		classKey := fmt.Sprintf("%d%s", s.ClassNumber, s.ClassLetter)
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –∫–ª–∞—Å—Å—É
		if _, exists := classMap[classKey]; !exists {
			classMap[classKey] = &classStat{Name: classKey}
		}

		// –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–ª–ª—ã –ù–ï –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ê—É–∫—Ü–∏–æ–Ω"
		if s.CategoryLabel != "–ê—É–∫—Ü–∏–æ–Ω" {
			classMap[classKey].Total += s.Points
		}
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–∫ 30% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –±–∞–ª–ª–æ–≤
	for _, class := range classMap {
		class.Rating = class.Total * 30 / 100
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞
	var classes []classStat
	for _, v := range classMap {
		classes = append(classes, *v)
	}
	sort.Slice(classes, func(i, j int) bool {
		var numI, numJ int
		var letI, letJ string
		fmt.Sscanf(classes[i].Name, "%d%s", &numI, &letI)
		fmt.Sscanf(classes[j].Name, "%d%s", &numJ, &letJ)

		if numI != numJ {
			return numI < numJ
		}
		if classes[i].Total != classes[j].Total {
			return classes[i].Total > classes[j].Total
		}
		return letI < letJ
	})

	// –§–æ—Ä–º–∏—Ä—É–µ–º Excel-–æ—Ç—á—ë—Ç
	f := excelize.NewFile()
	sheet := "SchoolReport"
	f.SetSheetName("Sheet1", sheet)

	headers := []string{"–ö–ª–∞—Å—Å", "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"}
	for i, h := range headers {
		cell := fmt.Sprintf("%s1", string(rune('A'+i)))
		f.SetCellValue(sheet, cell, h)
	}
	for i, c := range classes {
		row := i + 2
		_ = f.SetCellValue(sheet, fmt.Sprintf("A%d", row), c.Name)
		_ = f.SetCellValue(sheet, fmt.Sprintf("B%d", row), c.Rating)
	}

	filename := fmt.Sprintf("school_report_%d.xlsx", time.Now().Unix())
	path := filepath.Join(os.TempDir(), filename)
	err := f.SaveAs(path)
	return path, err
}
