package handlers

import (
	"database/sql"
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
)

func HandleMyScore(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	telegramID := msg.From.ID
	user, err := db.GetUserByTelegramID(database, telegramID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		sendText(bot, msg.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	var targetID int64
	// –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å ‚Äî –Ω–∞–π–¥—ë–º —Ä–µ–±—ë–Ω–∫–∞
	if user.Role != nil && *user.Role == "parent" {
		err = database.QueryRow(`SELECT child_id FROM users WHERE id = ? AND role = 'parent'`, user.ID).Scan(&targetID)
		if err != nil {
			sendText(bot, msg.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")
			return
		}
	} else {
		targetID = user.ID
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –±–∞–ª–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	rows, err := database.Query(`
SELECT c.label, SUM(points) as total
FROM scores s
JOIN categories c ON s.category_id = c.id
WHERE s.student_id = ? AND s.approved = 1
GROUP BY s.category_id
`, telegramID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –±–∞–ª–ª–æ–≤:", err)
		sendText(bot, msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –±–∞–ª–ª–æ–≤.")
		return
	}
	defer rows.Close()

	summary := make(map[string]int)
	total := 0

	for rows.Next() {
		var label string
		var sum int
		if err := rows.Scan(&label, &sum); err != nil {
			continue
		}
		summary[label] = sum
		total += sum
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
	text := fmt.Sprintf("üìä –í–∞—à –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %d –±–∞–ª–ª–æ–≤\n\n", total)
	for label, val := range summary {
		text += fmt.Sprintf("‚ñ´Ô∏è %s: %d\n", label, val)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–ø–∏—Å–∞–Ω–∏—è
	history, err := db.GetScoreByStudent(database, telegramID)
	if err != nil {
		log.Println("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:", err)
	} else {
		if len(history) > 0 {
			text += "\n\nüìñ –ò—Å—Ç–æ—Ä–∏—è:\n"
			count := 0
			for _, s := range history {
				if !s.Approved {
					continue
				}
				sign := "+"
				if s.Points < 0 {
					sign = "-"
				}
				date := s.CreatedAt.Format("02.01.2006")
				reason := "-"
				if s.Comment != nil && *s.Comment != "" {
					reason = *s.Comment
				}

				if reason == "-" {
					text += fmt.Sprintf("%s%d %s (%s)\n", sign, abs(s.Points), s.CategoryLabel, date)
				} else {
					text += fmt.Sprintf("%s%d %s ‚Äî %s (%s)\n", sign, abs(s.Points), s.CategoryLabel, reason, date)
				}

				count++
				if count >= 10 {
					break
				}
			}
		} else {
			text += "\n\nüìñ –ò—Å—Ç–æ—Ä–∏—è: –ø—É—Å—Ç–æ"
		}
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, text))
}

func abs(n int) int {
	if n < 0 {
		return -n
	}
	return n
}
