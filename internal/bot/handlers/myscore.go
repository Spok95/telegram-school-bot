package handlers

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleMyScore(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	user, err := db.GetUserByTelegramID(database, chatID)
	if err != nil {
		log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", err)
	}
	if user == nil || !user.IsActive {
		bot.Send(tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."))
		return
	}

	var targetID = user.ID

	// –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å ‚Äî –∏—â–µ–º telegram_id —Ä–µ–±—ë–Ω–∫–∞
	if *user.Role == models.Parent {
		var studentInternalID int64
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		err := database.QueryRowContext(ctx, `
			SELECT student_id FROM parents_students WHERE parent_id = $1
		`, user.ID).Scan(&studentInternalID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."))
			return
		}

		targetID = studentInternalID
	}

	// –ì—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ [from, to)
	now := time.Now()
	from, to := db.SchoolYearBounds(now)
	yearLabel := db.SchoolYearLabel(db.CurrentSchoolYearStartYear(now))

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—É–º–º—ã –¢–û–õ–¨–ö–û –∑–∞ —Ç–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	rows, err := database.QueryContext(ctx, `
		SELECT c.label, SUM(s.points) AS total
		FROM scores s
		JOIN categories c ON s.category_id = c.id
		WHERE s.student_id = $1 
		  AND s.status = 'approved'
		  AND s.created_at >= $2 AND s.created_at < $3
		GROUP BY c.label
		ORDER BY total DESC
	`, targetID, from, to)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."))
		return
	}
	defer rows.Close()

	summary := make(map[string]int)
	total := 0

	for rows.Next() {
		var label string
		var sum int
		if err := rows.Scan(&label, &sum); err != nil {
			continue
		}
		summary[label] = sum
		total += sum
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
	text := fmt.Sprintf("üéì –£—á–µ–±–Ω—ã–π –≥–æ–¥: %s\nüìä –í–∞—à –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %d –±–∞–ª–ª–æ–≤\n\n", yearLabel, total)
	for label, val := range summary {
		text += fmt.Sprintf("‚ñ´Ô∏è %s: %d\n", label, val)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–ø–∏—Å–∞–Ω–∏—è
	history, err := db.GetScoresByStudentAndDateRange(database, targetID, from, to)
	if err != nil {
		log.Println("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:", err)
	} else {
		if len(history) > 0 {
			text += "\n\nüìñ –ò—Å—Ç–æ—Ä–∏—è:\n"
			count := 0
			for _, s := range history {
				if s.Status != "approved" {
					continue
				}
				sign := "+"
				if s.Type == "remove" {
					sign = "-"
				}
				date := s.CreatedAt.Format("02.01.2006")
				reason := "-"
				if s.Comment != nil && *s.Comment != "" {
					reason = *s.Comment
				}

				if reason == "-" {
					text += fmt.Sprintf("%s%d %s (%s)\n", sign, abs(s.Points), s.CategoryLabel, date)
				} else {
					text += fmt.Sprintf("%s%d %s ‚Äî %s (%s)\n", sign, abs(s.Points), s.CategoryLabel, reason, date)
				}

				count++
				if count >= 10 {
					break
				}
			}
		} else {
			text += "\n\nüìñ –ò—Å—Ç–æ—Ä–∏—è: –ø—É—Å—Ç–æ"
		}
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, text))
}

func abs(n int) int {
	if n < 0 {
		return -n
	}
	return n
}

func HandleParentRatingRequest(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64, parentID int64) {
	children, err := db.GetChildrenByParentID(database, parentID)
	if err != nil || len(children) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π."))
		return
	}

	if len(children) == 1 {
		ShowStudentRating(bot, database, chatID, children[0].ID)
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, child := range children {
		text := fmt.Sprintf("%s (%d%s –∫–ª–∞—Å—Å)", child.Name, *child.ClassNumber, *child.ClassLetter)
		callback := fmt.Sprintf("show_rating_student_%d", child.ID)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(text, callback),
		))
	}

	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:")
	msg.ReplyMarkup = markup
	bot.Send(msg)
}

func ShowStudentRating(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64, studentID int64) {
	// –ì—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞
	now := time.Now()
	from, to := db.SchoolYearBounds(now)
	yearLabel := db.SchoolYearLabel(db.CurrentSchoolYearStartYear(now))

	// –§–ò–û —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
	childName := ""
	if u, err := db.GetUserByID(database, studentID); err == nil && u.Name != "" {
		childName = u.Name
	}

	// –°—É–º–º—ã —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	rows, err := database.QueryContext(ctx, `
		SELECT c.label, SUM(s.points) AS total
		FROM scores s
		JOIN categories c ON s.category_id = c.id
		WHERE s.student_id = $1 
		  AND s.status = 'approved'
		  AND s.created_at >= $2 AND s.created_at < $3
		GROUP BY c.label
		ORDER BY total DESC
	`, studentID, from, to)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."))
		return
	}
	defer rows.Close()

	summary := make(map[string]int)
	total := 0

	for rows.Next() {
		var label string
		var sum int
		if err := rows.Scan(&label, &sum); err != nil {
			continue
		}
		summary[label] = sum
		total += sum
	}

	header := fmt.Sprintf("üéì –£—á–µ–±–Ω—ã–π –≥–æ–¥: %s\n", yearLabel)
	if childName != "" {
		header += fmt.Sprintf("üë§ –†–µ–±—ë–Ω–æ–∫: %s\n", childName)
	}
	text := fmt.Sprintf("%süìä –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %d –±–∞–ª–ª–æ–≤\n\n", header, total)

	for label, val := range summary {
		text += fmt.Sprintf("‚ñ´Ô∏è %s: %d\n", label, val)
	}

	history, err := db.GetScoresByStudentAndDateRange(database, studentID, from, to)
	if err == nil && len(history) > 0 {
		text += "\n\nüìñ –ò—Å—Ç–æ—Ä–∏—è:\n"
		count := 0
		for _, s := range history {
			if s.Status != "approved" {
				continue
			}
			sign := "+"
			if s.Type == "remove" {
				sign = "-"
			}
			date := s.CreatedAt.Format("02.01.2006")
			reason := "-"
			if s.Comment != nil && *s.Comment != "" {
				reason = *s.Comment
			}
			if reason == "-" {
				text += fmt.Sprintf("%s%d %s (%s)\n", sign, abs(s.Points), s.CategoryLabel, date)
			} else {
				text += fmt.Sprintf("%s%d %s ‚Äî %s (%s)\n", sign, abs(s.Points), s.CategoryLabel, reason, date)
			}
			count++
			if count >= 10 {
				break
			}
		}
	} else {
		text += "\n\nüìñ –ò—Å—Ç–æ—Ä–∏—è: –ø—É—Å—Ç–æ"
	}

	bot.Send(tgbotapi.NewMessage(chatID, text))
}
