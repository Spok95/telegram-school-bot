package handlers

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
)

func HandleMyScore(bot *tgbotapi.BotAPI, db *sql.DB, msg *tgbotapi.Message) {
	telegramID := msg.From.ID
	var userID int64
	var role string
	var targetID int64

	// –ü–æ–ª—É—á–∞–µ–º ID –∏ —Ä–æ–ª—å
	err := db.QueryRow(`SELECT id, role FROM users WHERE telegram_id = ?`, telegramID).Scan(&userID, &role)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		sendText(bot, msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
		return
	}

	// –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å ‚Äî –Ω–∞–π–¥—ë–º —Ä–µ–±—ë–Ω–∫–∞
	if role == "parent" {
		err := db.QueryRow(`SELECT id FROM users WHERE parent_id = ? AND role = 'student'`, userID).Scan(&targetID)
		if err != nil {
			sendText(bot, msg.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")
			return
		}
	} else {
		targetID = userID
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –±–∞–ª–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	rows, err := db.Query(`
SELECT category, SUM(value) as total
FROM scores
WHERE user_id = ? AND approved = 1
GROUP BY category
`, targetID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –±–∞–ª–ª–æ–≤:", err)
		sendText(bot, msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –±–∞–ª–ª–æ–≤.")
		return
	}
	defer rows.Close()

	summary := make(map[string]int)
	total := 0

	for rows.Next() {
		var cat string
		var sum int
		if err := rows.Scan(&cat, &sum); err != nil {
			continue
		}
		summary[cat] = sum
		total += sum
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
	text := fmt.Sprintf("üìä –í–∞—à –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %d –±–∞–ª–ª–æ–≤\n\n", total)
	for _, cat := range []string{"work", "elective", "activity", "social", "duty"} {
		val := summary[cat]
		text += fmt.Sprintf("‚ñ´Ô∏è %s: %d\n", categoryToLabel(cat), val)
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, text))
}

func categoryToLabel(key string) string {
	switch key {
	case "work":
		return "–†–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ"
	case "elective":
		return "–ö—É—Ä—Å—ã –ø–æ –≤—ã–±–æ—Ä—É"
	case "activity":
		return "–í–Ω–µ—É—Ä–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
	case "social":
		return "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏"
	case "duty":
		return "–î–µ–∂—É—Ä—Å—Ç–≤–æ"
	default:
		return key
	}
}
