package handlers

import (
	"database/sql"
	"fmt"
	"github.com/Spok95/telegram-school-bot/internal/bot/menu"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
	"strconv"
	"strings"
)

var notifiedAdmins = make(map[int64]bool)

func ShowPendingUsers(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64) {
	adminIDStr := os.Getenv("ADMIN_ID")
	adminID, err := strconv.ParseInt(adminIDStr, 10, 64)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ADMIN_ID –∏–∑ .env:", err)
		return
	}

	var count int
	err = database.QueryRow(`SELECT COUNT(*) FROM users WHERE confirmed = 0 AND role != 'admin'`).Scan(&count)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞—è–≤–æ–∫:", err)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫."))
		return
	}

	if count == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."))
		return
	}

	rows, err := database.Query(`
		SELECT id, name, role, telegram_id FROM users WHERE confirmed = 0 AND role != 'admin'
	`)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(adminID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫."))
		return
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var name, role string
		var tgID int64

		rows.Scan(&id, &name, &role, &tgID)

		var msg string

		if role == "student" {
			var classNumber, classLetter sql.NullString
			err := database.QueryRow(`SELECT class_number, class_letter FROM users WHERE id = ?`, id).Scan(&classNumber, &classLetter)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞:", err)
				continue
			}
			msg = fmt.Sprintf(
				"–ó–∞—è–≤–∫–∞:\nüë§ %s\nüè´ –ö–ª–∞—Å—Å: %s%s\nüß© –†–æ–ª—å: %s\nTelegramID: %d",
				name,
				classNumber.String, classLetter.String,
				role, tgID,
			)
		} else if role == "parent" {
			var studentName, studentClassNumber, studentClassLetter sql.NullString

			// –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è (Telegram username –∏–ª–∏ –∏–º—è –∏–∑ Telegram –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å)
			err := database.QueryRow(`
			SELECT u.name, u.class_number, u.class_letter
			FROM users u
			JOIN parents_students ps ON ps.student_id = u.id
			WHERE ps.parent_id = ?
		`, id).Scan(&studentName, &studentClassNumber, &studentClassLetter)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–±—ë–Ω–∫–µ:", err)
				continue
			}

			msg = fmt.Sprintf(
				"–ó–∞—è–≤–∫–∞:\nüë§ –†–æ–¥–∏—Ç–µ–ª—å: %s\nüë§ –†–µ–±—ë–Ω–æ–∫: %s\nüè´ –ö–ª–∞—Å—Å: %s%s\nüß© –†–æ–ª—å: %s\nTelegramID: %d",
				name, studentName.String, studentClassNumber.String, studentClassLetter.String,
				role, tgID,
			)
		} else {
			// fallback
			msg = fmt.Sprintf("–ó–∞—è–≤–∫–∞:\nüë§ %s\nüß© –†–æ–ª—å: %s\nTelegramID: %d", name, role, tgID)
		}

		btnYes := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("confirm_%d", id))
		brnNo := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", id))
		markup := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(btnYes, brnNo))

		message := tgbotapi.NewMessage(adminID, msg)
		message.ReplyMarkup = markup
		bot.Send(message)
	}
}

func HandleAdminCallback(callback *tgbotapi.CallbackQuery, database *sql.DB, bot *tgbotapi.BotAPI, adminID int64) {
	data := callback.Data
	messageID := callback.Message.MessageID
	chatID := callback.Message.Chat.ID
	adminUsername := callback.From.UserName

	if strings.HasPrefix(data, "confirm_") {
		idStr := strings.TrimPrefix(data, "confirm_")

		err := ConfirmUser(database, bot, idStr, adminID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(adminID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."))
			return
		}

		newText := fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: @%s", adminUsername)
		edit := tgbotapi.NewEditMessageText(chatID, messageID, newText)
		bot.Send(edit)
	} else if strings.HasPrefix(data, "reject_") {
		idStr := strings.TrimPrefix(data, "reject_")

		err := RejectUser(database, bot, idStr, adminID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(adminID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."))
			return
		}

		newText := fmt.Sprintf("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–û—Ç–∫–ª–æ–Ω–∏–ª: @%s", adminUsername)
		edit := tgbotapi.NewEditMessageText(chatID, messageID, newText)
		bot.Send(edit)
	}
	callbackConfig := tgbotapi.CallbackConfig{
		CallbackQueryID: callback.ID,
		Text:            "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
		ShowAlert:       false,
	}
	bot.Request(callbackConfig)
}

func ConfirmUser(database *sql.DB, bot *tgbotapi.BotAPI, name string, adminID int64) error {
	tx, err := database.Begin()
	if err != nil {
		return err
	}
	defer tx.Rollback()

	var telegramID int64
	err = database.QueryRow(`SELECT telegram_id FROM users WHERE id = ?`, name).Scan(&telegramID)
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å (–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
	var role string
	err = tx.QueryRow(`SELECT role FROM users WHERE id = ? AND confirmed = 0`, name).Scan(&role)
	if err != nil {
		// –ª–∏–±–æ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –ª–∏–±–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
		return fmt.Errorf("–∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
	res, err := tx.Exec(`UPDATE users SET confirmed = 1 WHERE id = ? AND confirmed = 0`, name)
	if err != nil {
		return err
	}
	rowsAffected, _ := res.RowsAffected()
	if rowsAffected == 0 {
		return fmt.Errorf("–∑–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º")
	}

	msg := tgbotapi.NewMessage(telegramID, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
	msg.ReplyMarkup = menu.GetRoleMenu(role)
	bot.Send(msg)

	// –§–∏–∫—Å–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
	_, err = tx.Exec(`
		INSERT INTO role_changes (user_id, old_role, new_role, changed_by, changed_at)
		VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
	`, name, "unconfirmed", role, adminID)
	if err != nil {
		return err
	}
	return tx.Commit()
}

func RejectUser(database *sql.DB, bot *tgbotapi.BotAPI, name string, adminID int64) error {
	var telegramID int64
	err := database.QueryRow(`SELECT telegram_id FROM users WHERE id = ?`, name).Scan(&telegramID)
	if err != nil {
		return err
	}

	_, err = database.Exec(`DELETE FROM users WHERE id = ?`, name)
	if err != nil {
		return err
	}

	bot.Send(tgbotapi.NewMessage(telegramID, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."))
	return nil
}

func NotifyAdminsAboutScoreRequest(bot *tgbotapi.BotAPI, database *sql.DB, score models.Score, studentName string) {
	action := "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"
	if score.Type == "remove" {
		action = "—Å–ø–∏—Å–∞–Ω–∏—è"
	}

	// üì¢ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é
	rows, err := database.Query(`SELECT telegram_id FROM users WHERE role IN ('admin', 'administration') AND confirmed = 1 AND is_active = 1`)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var tgID int64
		if err := rows.Scan(&tgID); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è telegram_id:", err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
		if !notifiedAdmins[tgID] {
			notifiedAdmins[tgID] = true
			msg := tgbotapi.NewMessage(tgID, fmt.Sprintf("üì• –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è %s.", action))
			bot.Send(msg)
		}
	}
}
