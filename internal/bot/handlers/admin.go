package handlers

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
)

type RoleRequest struct {
	ID          int64  `json:"id"`
	TelegramID  int64  `json:"telegram_id"`
	FullName    string `json:"full_name"`
	PendingRole string `json:"pending_role"`
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /pending_roles
func HandlePendingRoles(bot *tgbotapi.BotAPI, db *sql.DB, msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
	var role string
	err := db.QueryRow(`SELECT role FROM users WHERE telegram_id = ?`, msg.From.ID).Scan(&role)
	if err != nil || role != "admin" {
		sendText(bot, msg.Chat.ID, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
	rows, err := db.Query(`
SELECT id, telegram_id, full_name, pending_role
FROM users
WHERE pending_role IS NOT NULL AND (role IS NULL OR role = '')
`)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞—è–≤–æ–∫:", err)
		sendText(bot, msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")
		return
	}
	defer rows.Close()

	count := 0
	for rows.Next() {
		var req RoleRequest
		if err := rows.Scan(&req.ID, &req.TelegramID, &req.FullName, &req.PendingRole); err != nil {
			continue
		}
		count++

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
		text := fmt.Sprintf("üìã –ó–∞—è–≤–∫–∞ –æ—Ç: %s\nTelegram ID: %d\n–ñ–µ–ª–∞–µ–º–∞—è —Ä–æ–ª—å: %s", req.FullName, req.TelegramID, req.PendingRole)

		confirm := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("confirm_role:%d", req.TelegramID))
		reject := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_role:%d", req.TelegramID))

		keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(confirm, reject))

		msgOut := tgbotapi.NewMessage(msg.Chat.ID, text)
		msgOut.ReplyMarkup = keyboard
		bot.Send(msgOut)
	}

	if count == 0 {
		sendText(bot, msg.Chat.ID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
func HandlePendingRoleCallback(bot *tgbotapi.BotAPI, db *sql.DB, cb *tgbotapi.CallbackQuery) {
	var action string
	var targetID int64

	_, err := fmt.Sscanf(cb.Data, "%[^:]:%d", &action, &targetID)
	if err != nil {
		_, err := bot.Request(tgbotapi.NewCallback(cb.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã"))
		if err != nil {
			log.Println(err)
		}
		return
	}

	var query string
	switch action {
	case "confirm_role":
		query = `UPDATE users SET role = pending_role, pending_role = NULL WHERE telegram_id = ?`
	case "reject_role":
		query = `UPDATE users SET pending_role = NULL WHERE telegram_id = ?`
	default:
		_, err := bot.Request(tgbotapi.NewCallback(cb.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"))
		if err != nil {
			log.Println(err)
		}
		return
	}

	_, err = db.Exec(query, targetID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏:", err)
		_, err := bot.Request(tgbotapi.NewCallback(cb.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"))
		if err != nil {
			log.Println(err)
		}
		return
	}

	_, err = bot.Request(tgbotapi.NewCallback(cb.ID, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ"))
	if err != nil {
		log.Println(err)
	}
	bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."))
}
