package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/Spok95/telegram-school-bot/internal/bot/menu"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var notifiedAdmins = make(map[int64]bool)

func ShowPendingUsers(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64) {
	adminIDStr := os.Getenv("ADMIN_ID")
	adminID, err := strconv.ParseInt(adminIDStr, 10, 64)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ADMIN_ID –∏–∑ .env:", err)
		return
	}

	var count int
	err = database.QueryRow(`SELECT COUNT(*) FROM users WHERE confirmed = FALSE AND role != 'admin'`).Scan(&count)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞—è–≤–æ–∫:", err)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫."))
		return
	}

	if count == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."))
		return
	}

	rows, err := database.Query(`
		SELECT id, name, role, telegram_id FROM users WHERE confirmed = FALSE AND role != 'admin'
	`)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(adminID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫."))
		return
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var name, role string
		var tgID int64

		rows.Scan(&id, &name, &role, &tgID)

		var msg string

		if role == "student" {
			var classNumber, classLetter sql.NullString
			err := database.QueryRow(`SELECT class_number, class_letter FROM users WHERE id = $1`, id).Scan(&classNumber, &classLetter)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞:", err)
				continue
			}
			msg = fmt.Sprintf(
				"–ó–∞—è–≤–∫–∞:\nüë§ %s\nüè´ –ö–ª–∞—Å—Å: %s%s\nüß© –†–æ–ª—å: %s\nTelegramID: %d",
				name,
				classNumber.String, classLetter.String,
				role, tgID,
			)
		} else if role == "parent" {
			var studentName, studentClassNumber, studentClassLetter sql.NullString

			// –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è (Telegram username –∏–ª–∏ –∏–º—è –∏–∑ Telegram –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å)
			err := database.QueryRow(`
			SELECT u.name, u.class_number, u.class_letter
			FROM users u
			JOIN parents_students ps ON ps.student_id = u.id
			WHERE ps.parent_id = $1
		`, id).Scan(&studentName, &studentClassNumber, &studentClassLetter)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–±—ë–Ω–∫–µ:", err)
				continue
			}

			msg = fmt.Sprintf(
				"–ó–∞—è–≤–∫–∞:\nüë§ –†–æ–¥–∏—Ç–µ–ª—å: %s\nüë§ –†–µ–±—ë–Ω–æ–∫: %s\nüè´ –ö–ª–∞—Å—Å: %s%s\nüß© –†–æ–ª—å: %s\nTelegramID: %d",
				name, studentName.String, studentClassNumber.String, studentClassLetter.String,
				role, tgID,
			)
		} else {
			// fallback
			msg = fmt.Sprintf("–ó–∞—è–≤–∫–∞:\nüë§ %s\nüß© –†–æ–ª—å: %s\nTelegramID: %d", name, role, tgID)
		}

		btnYes := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("confirm_%d", id))
		brnNo := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", id))
		markup := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(btnYes, brnNo))

		message := tgbotapi.NewMessage(adminID, msg)
		message.ReplyMarkup = markup
		bot.Send(message)
	}
}

func HandleAdminCallback(callback *tgbotapi.CallbackQuery, database *sql.DB, bot *tgbotapi.BotAPI, adminID int64) {
	data := callback.Data
	messageID := callback.Message.MessageID
	chatID := callback.Message.Chat.ID
	adminUsername := callback.From.UserName

	if strings.HasPrefix(data, "confirm_") {
		idStr := strings.TrimPrefix(data, "confirm_")

		err := ConfirmUser(database, bot, idStr, adminID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(adminID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."))
			return
		}

		newText := fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: @%s", adminUsername)
		edit := tgbotapi.NewEditMessageText(chatID, messageID, newText)
		bot.Send(edit)
	} else if strings.HasPrefix(data, "reject_") {
		idStr := strings.TrimPrefix(data, "reject_")

		err := RejectUser(database, bot, idStr, adminID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(adminID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."))
			return
		}

		newText := fmt.Sprintf("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–û—Ç–∫–ª–æ–Ω–∏–ª: @%s", adminUsername)
		edit := tgbotapi.NewEditMessageText(chatID, messageID, newText)
		bot.Send(edit)
	}
	callbackConfig := tgbotapi.CallbackConfig{
		CallbackQueryID: callback.ID,
		Text:            "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
		ShowAlert:       false,
	}
	bot.Request(callbackConfig)
}

func ConfirmUser(database *sql.DB, bot *tgbotapi.BotAPI, name string, adminTG int64) error {
	tx, err := database.Begin()
	if err != nil {
		return err
	}
	defer tx.Rollback()

	var telegramID int64
	err = tx.QueryRow(`SELECT telegram_id FROM users WHERE id = $1`, name).Scan(&telegramID)
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å (–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
	var role string
	err = tx.QueryRow(`SELECT role FROM users WHERE id = $1 AND confirmed = FALSE`, name).Scan(&role)
	if err != nil {
		// –ª–∏–±–æ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –ª–∏–±–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
		return fmt.Errorf("–∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
	res, err := tx.Exec(`UPDATE users SET confirmed = TRUE WHERE id = $1 AND confirmed = FALSE`, name)
	if err != nil {
		return err
	}
	rowsAffected, _ := res.RowsAffected()
	if rowsAffected == 0 {
		return fmt.Errorf("–∑–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º")
	}

	var adminID int64
	if err := tx.QueryRow(`SELECT id FROM users WHERE telegram_id = $1 AND role = 'admin'`, adminTG).Scan(&adminID); err != nil {
		// –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∞–¥–º–∏–Ω –Ω–µ –∑–∞–≤–µ–¥–µ–Ω –≤ users ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å NULL/0 –∏–ª–∏ —É–±—Ä–∞—Ç—å FK, –Ω–æ –ª—É—á—à–µ –∑–∞–≤–µ—Å—Ç–∏ –∞–¥–º–∏–Ω–∞
		return fmt.Errorf("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ users: %w", err)
	}

	// –§–∏–∫—Å–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
	_, err = tx.Exec(`
		INSERT INTO role_changes (user_id, old_role, new_role, changed_by, changed_at)
		VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
	`, name, "unconfirmed", role, adminID)
	if err != nil {
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	msg := tgbotapi.NewMessage(telegramID, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
	msg.ReplyMarkup = menu.GetRoleMenu(role)
	_, _ = bot.Send(msg)

	return nil
}

func RejectUser(database *sql.DB, bot *tgbotapi.BotAPI, name string, adminID int64) error {
	var telegramID int64
	err := database.QueryRow(`SELECT telegram_id FROM users WHERE id = $1`, name).Scan(&telegramID)
	if err != nil {
		return err
	}

	_, err = database.Exec(`DELETE FROM users WHERE id = $1`, name)
	if err != nil {
		return err
	}

	bot.Send(tgbotapi.NewMessage(telegramID, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."))
	return nil
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func NotifyAdminsAboutNewUser(bot *tgbotapi.BotAPI, database *sql.DB, userID int64) {
	// —á–∏—Ç–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –≤—Å–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
	var (
		name, role         string
		tgID               int64
		classNum, classLet sql.NullString
	)
	if err := database.QueryRow(`
		SELECT name, role, telegram_id, class_number, class_letter
		FROM users
		WHERE id = $1
		`, userID).Scan(&name, &role, &tgID, &classNum, &classLet); err != nil {
		log.Printf("NotifyAdminsAboutNewUser: –∑–∞–ø–∏—Å—å %d –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞: %v", userID, err)
		return
	}

	// —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
	msg := fmt.Sprintf("–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:\nüë§ %s\nüß© –†–æ–ª—å: %s\nTelegramID: %d", name, role, tgID)
	if role == "student" && classNum.Valid && classLet.Valid {
		msg = fmt.Sprintf("–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:\nüë§ %s\nüè´ –ö–ª–∞—Å—Å: %s%s\nüß© –†–æ–ª—å: %s\nTelegramID: %d",
			name, classNum.String, classLet.String, role, tgID)
	}

	// –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ –≤ ShowPendingUsers
	btnYes := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("confirm_%d", userID))
	btnNo := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", userID))
	markup := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(btnYes, btnNo))

	// —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
	rows, err := database.Query(`SELECT telegram_id FROM users WHERE role = 'admin' AND confirmed = TRUE AND is_active = TRUE`)
	if err != nil {
		return
	}
	defer rows.Close()

	for rows.Next() {
		var adminTG int64
		if err := rows.Scan(&adminTG); err != nil {
			continue
		}
		m := tgbotapi.NewMessage(adminTG, msg)
		m.ReplyMarkup = markup
		bot.Send(m)
	}
}

func NotifyAdminsAboutScoreRequest(bot *tgbotapi.BotAPI, database *sql.DB, score models.Score, studentName string) {
	action := "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"
	if score.Type == "remove" {
		action = "—Å–ø–∏—Å–∞–Ω–∏—è"
	}

	// üì¢ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é
	rows, err := database.Query(`SELECT telegram_id FROM users WHERE role IN ('admin', 'administration') AND confirmed = TRUE AND is_active = TRUE`)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var tgID int64
		if err := rows.Scan(&tgID); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è telegram_id:", err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
		if !notifiedAdmins[tgID] {
			notifiedAdmins[tgID] = true
			msg := tgbotapi.NewMessage(tgID, fmt.Sprintf("üì• –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è %s.", action))
			bot.Send(msg)
		}
	}
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É "—Ä–æ–¥–∏—Ç–µ–ª—å ‚áÑ —Ä–µ–±—ë–Ω–æ–∫"
func ShowPendingParentLinks(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64) {
	rows, err := database.Query(`
        SELECT r.id, p.name as parent_name, s.name as student_name, s.class_number, s.class_letter
        FROM parent_link_requests r
        JOIN users p ON p.id = r.parent_id
        JOIN users s ON s.id = r.student_id
        ORDER BY r.created_at ASC
    `)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É."))
		return
	}
	defer rows.Close()

	has := false
	for rows.Next() {
		has = true
		var id int
		var parentName, studentName, classLetter string
		var classNumber sql.NullString // –µ—Å–ª–∏ —É –≤–∞—Å integer ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ int
		// –ø–æ–¥—Å—Ç—Ä–æ–π—Ç–µ —Ç–∏–ø—ã –ø–æ–¥ –≤–∞—à—É —Å—Ö–µ–º—É
		if err := rows.Scan(&id, &parentName, &studentName, &classNumber, &classLetter); err != nil {
			continue
		}
		msg := fmt.Sprintf("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É:\nüë§ –†–æ–¥–∏—Ç–µ–ª—å: %s\nüë¶ –†–µ–±—ë–Ω–æ–∫: %s\nüè´ –ö–ª–∞—Å—Å: %s%s",
			parentName, studentName, classNumber.String, classLetter,
		)
		markup := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("link_confirm_%d", id)),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("link_reject_%d", id)),
			),
		)
		m := tgbotapi.NewMessage(chatID, msg)
		m.ReplyMarkup = markup
		bot.Send(m)
	}
	if !has {
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –¥–µ—Ç–µ–π."))
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É
func HandleParentLinkApprovalCallback(cb *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI, database *sql.DB, adminID int64) {
	data := cb.Data
	chatID := cb.Message.Chat.ID
	msgID := cb.Message.MessageID
	adminUsername := cb.From.UserName

	getIDs := func(reqID string) (parentID, studentID int64, err error) {
		err = database.QueryRow(`SELECT parent_id, student_id FROM parent_link_requests WHERE id = $1`, reqID).
			Scan(&parentID, &studentID)
		return
	}

	if strings.HasPrefix(data, "link_confirm_") {
		reqID := strings.TrimPrefix(data, "link_confirm_")
		parentID, studentID, err := getIDs(reqID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))
			return
		}

		tx, err := database.Begin()
		if err != nil {
			return
		}
		defer tx.Rollback()

		// –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å (id –≤ users, –Ω–µ telegram_id!)
		if _, err = tx.Exec(`
			INSERT INTO parents_students(parent_id, student_id)
			VALUES($1,$2)
			ON CONFLICT (parent_id, student_id) DO NOTHING
			`, parentID, studentID); err != nil {
			return
		}
		if _, err = tx.Exec(`DELETE FROM parent_link_requests WHERE id = $1`, reqID); err != nil {
			return
		}
		if err = tx.Commit(); err != nil {
			return
		}

		// ‚§µÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è:
		// –µ—Å–ª–∏ —É –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–∏ ‚Äî –æ–Ω —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º.
		if err := db.RefreshParentActiveFlag(database, parentID); err != nil {
			log.Printf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è: %v", err)
		}

		// (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É —É—á–µ–Ω–∏–∫—É –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ,
		// —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ –Ω–∏–∂–µ. –°–µ–π—á–∞—Å –º—ã –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∏ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–¥–∏—Ç–µ–ª—è.
		/*
			var active bool
			if err := database.QueryRow(`SELECT is_active FROM users WHERE id = $1`, studentID).Scan(&active); err == nil && !active {
			// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ-–∑–∞–º–µ—Ç–∫—É –∞–¥–º–∏–Ω—É
				bot.Send(tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –†–æ–¥–∏—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ—Ç–µ–π."))
			}
		*/

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		var pTG, sTG int64
		_ = database.QueryRow(`SELECT telegram_id FROM users WHERE id = $1`, parentID).Scan(&pTG)
		_ = database.QueryRow(`SELECT telegram_id FROM users WHERE id = $1`, studentID).Scan(&sTG)
		if pTG != 0 {
			bot.Send(tgbotapi.NewMessage(pTG, "‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–µ–±—ë–Ω–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."))
		}
		if sTG != 0 {
			bot.Send(tgbotapi.NewMessage(sTG, "‚ÑπÔ∏è –í–∞—à —Ä–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."))
		}

		edit := tgbotapi.NewEditMessageText(chatID, msgID, fmt.Sprintf("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: @%s", adminUsername))
		bot.Send(edit)
		bot.Request(tgbotapi.NewCallback(cb.ID, "–ì–æ—Ç–æ–≤–æ"))
		return
	}

	if strings.HasPrefix(data, "link_reject_") {
		reqID := strings.TrimPrefix(data, "link_reject_")
		var parentID int64
		_ = database.QueryRow(`SELECT parent_id FROM parent_link_requests WHERE id = $1`, reqID).Scan(&parentID)
		_, _ = database.Exec(`DELETE FROM parent_link_requests WHERE id = $1`, reqID)

		// –£–≤–µ–¥–æ–º–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è
		if parentID != 0 {
			var pTG int64
			_ = database.QueryRow(`SELECT telegram_id FROM users WHERE id = $1`, parentID).Scan(&pTG)
			if pTG != 0 {
				bot.Send(tgbotapi.NewMessage(pTG, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."))
			}
		}

		edit := tgbotapi.NewEditMessageText(chatID, msgID, fmt.Sprintf("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–û—Ç–∫–ª–æ–Ω–∏–ª: @%s", adminUsername))
		bot.Send(edit)
		bot.Request(tgbotapi.NewCallback(cb.ID, "–ì–æ—Ç–æ–≤–æ"))
		return
	}
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É
func NotifyAdminsAboutParentLink(bot *tgbotapi.BotAPI, database *sql.DB, requestID int64) {
	rows, err := database.Query(`SELECT telegram_id FROM users WHERE role = 'admin' AND confirmed = TRUE AND is_active = TRUE`)
	if err != nil {
		return
	}
	defer rows.Close()

	for rows.Next() {
		var tgID int64
		if err := rows.Scan(&tgID); err != nil {
			continue
		}
		text := fmt.Sprintf("üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É —Ä–µ–±—ë–Ω–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é¬ª, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.")
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ä–∞–∑—É –∫–∞—Ä—Ç–æ—á–∫–∏ (ShowPendingParentLinks), –Ω–æ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –º–µ–Ω—é
		bot.Send(tgbotapi.NewMessage(tgID, text))
	}
}
