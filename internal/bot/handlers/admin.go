package handlers

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
)

type RoleRequest struct {
	ID          int64  `json:"id"`
	TelegramID  int64  `json:"telegram_id"`
	FullName    string `json:"full_name"`
	PendingRole string `json:"pending_role"`
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /pending_roles
func HandlePendingRoles(bot *tgbotapi.BotAPI, db *sql.DB, msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
	var role string
	err := db.QueryRow(`SELECT role FROM users WHERE telegram_id = ?`, msg.From.ID).Scan(&role)
	if err != nil || role != "admin" {
		sendText(bot, msg.Chat.ID, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
	rows, err := db.Query(`
SELECT id, telegram_id, full_name, pending_role
FROM users
WHERE pending_role IS NOT NULL AND (role IS NULL OR role = '')
`)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞—è–≤–æ–∫:", err)
		sendText(bot, msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")
		return
	}
	defer rows.Close()

	count := 0
	for rows.Next() {
		var req RoleRequest
		if err := rows.Scan(&req.ID, &req.TelegramID, &req.FullName, &req.PendingRole); err != nil {
			continue
		}
		count++

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
		text := fmt.Sprintf("üìã –ó–∞—è–≤–∫–∞ –æ—Ç: %s\nTelegram ID: %d\n–ñ–µ–ª–∞–µ–º–∞—è —Ä–æ–ª—å: %s", req.FullName, req.TelegramID, req.PendingRole)

		confirm := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("confirm_role:%d", req.TelegramID))
		reject := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_role:%d", req.TelegramID))

		keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(confirm, reject))

		msgOut := tgbotapi.NewMessage(msg.Chat.ID, text)
		msgOut.ReplyMarkup = keyboard
		bot.Send(msgOut)
	}

	if count == 0 {
		sendText(bot, msg.Chat.ID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
func HandlePendingRoleCallback(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	data := cb.Data

	if strings.HasPrefix(data, "approve_") {
		// approve_123456789_student
		parts := strings.Split(data, "_")
		if len(parts) != 3 {
			bot.Request(tgbotapi.NewCallback(cb.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"))
			return
		}

		userIDStr := parts[1]
		role := parts[2]

		userID, err := strconv.ParseInt(userIDStr, 10, 64)
		if err != nil {
			bot.Request(tgbotapi.NewCallback(cb.ID, "–û—à–∏–±–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
		_, err = database.Exec(`UPDATE users SET role = ?, pending_role = NULL WHERE telegram_id = ?`, role, userID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:", err)
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–æ–ª–∏."))
			return
		}

		bot.Request(tgbotapi.NewCallback(cb.ID, "–†–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"))

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		msg := tgbotapi.NewMessage(userID, fmt.Sprintf("‚úÖ –í–∞—à–∞ —Ä–æ–ª—å *%s* –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", role))
		msg.ParseMode = "Markdown"
		bot.Send(msg)

		// –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Ä–æ–ª—å—é
		fakeMsg := &tgbotapi.Message{
			From: &tgbotapi.User{ID: userID},
			Chat: &tgbotapi.Chat{ID: userID},
		}
		HandleStart(bot, database, fakeMsg)
	} else if strings.HasPrefix(data, "reject_") {
		// reject_123456789
		parts := strings.Split(data, "_")
		if len(parts) != 2 {
			bot.Request(tgbotapi.NewCallback(cb.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"))
			return
		}

		userIDStr := parts[1]
		userID, err := strconv.ParseInt(userIDStr, 10, 64)
		if err != nil {
			bot.Request(tgbotapi.NewCallback(cb.ID, "–û—à–∏–±–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
			return
		}

		// –£–¥–∞–ª—è–µ–º pending_role
		_, err = database.Exec(`UPDATE users SET pending_role = NULL WHERE telegram_id = ?`, userID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", err)
			bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏."))
			return
		}

		bot.Request(tgbotapi.NewCallback(cb.ID, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"))

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		bot.Send(tgbotapi.NewMessage(userID, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."))
	}
}
