package auth

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/Spok95/telegram-school-bot/internal/bot/handlers"
	"github.com/Spok95/telegram-school-bot/internal/bot/shared/fsmutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	StateAddChildName        = "add_child_name"
	StateAddChildClassNumber = "add_child_class_number"
	StateAddChildClassLetter = "add_child_class_letter"
	StateAddChildWaiting     = "add_child_waiting"
)

var addChildFSM = make(map[int64]string)
var addChildData = make(map[int64]*ParentRegisterData)

// ===== helpers (–∫–∞–∫ –≤ export/add/remove) =====

func addChildBackCancelRow() []tgbotapi.InlineKeyboardButton {
	return fsmutil.BackCancelRow("add_child_back", "add_child_cancel")
}

func addChildClassNumberRows() [][]tgbotapi.InlineKeyboardButton {
	var rows [][]tgbotapi.InlineKeyboardButton
	for i := 1; i <= 11; i++ {
		cb := fmt.Sprintf("parent_class_num_%d", i) // –æ—Å—Ç–∞–≤–∏–º –ø—Ä–µ—Ñ–∏–∫—Å parent_* —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%d –∫–ª–∞—Å—Å", i), cb),
		))
	}
	rows = append(rows, addChildBackCancelRow())
	return rows
}

func addChildClassLetterRows() [][]tgbotapi.InlineKeyboardButton {
	letters := []string{"–ê", "–ë", "–í", "–ì", "–î"}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, l := range letters {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(l, "parent_class_letter_"+l),
		))
	}
	rows = append(rows, addChildBackCancelRow())
	return rows
}

func addChildEditMenu(bot *tgbotapi.BotAPI, chatID int64, messageID int, text string, rows [][]tgbotapi.InlineKeyboardButton) {
	cfg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	mk := tgbotapi.NewInlineKeyboardMarkup(rows...)
	cfg.ReplyMarkup = &mk
	bot.Send(cfg)
}

// ===== –°—Ç–∞—Ä—Ç/—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–≥–∏ =====

func StartAddChild(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	addChildFSM[chatID] = StateAddChildName
	addChildData[chatID] = &ParentRegisterData{}
	bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:\n(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)"))
}

func HandleAddChildText(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state := GetAddChildFSMState(chatID)

	trimmed := strings.TrimSpace(msg.Text)
	if strings.EqualFold(trimmed, "–æ—Ç–º–µ–Ω–∞") || strings.EqualFold(trimmed, "/cancel") {
		delete(addChildFSM, chatID)
		delete(addChildData, chatID)
		bot.Send(tgbotapi.NewMessage(chatID, "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
		return
	}

	switch state {
	case StateAddChildName:
		fio := strings.TrimSpace(msg.Text)
		fio = db.ToTitleRU(fio)

		addChildData[chatID].StudentName = fio
		addChildFSM[chatID] = StateAddChildClassNumber

		out := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ —Ä–µ–±—ë–Ω–∫–∞:")
		out.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(addChildClassNumberRows()...)
		bot.Send(out)
	case StateAddChildClassNumber:
		// –¥–æ–ø. –∑–∞—â–∏—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ü–∏—Ñ—Ä–æ–π
		number, err := strconv.Atoi(msg.Text)
		if err != nil || number < 1 || number > 11 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (1‚Äì11) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏."))
			return
		}
		addChildData[chatID].ClassNumber = number
		addChildFSM[chatID] = StateAddChildClassLetter
		// —Å–æ–∑–¥–∞–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã
		out := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:")
		out.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(addChildClassLetterRows()...)
		bot.Send(out)
	case StateAddChildClassLetter:
		// –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –±—É–∫–≤—ã (–Ω–æ –ª—É—á—à–µ –∫–Ω–æ–ø–∫–æ–π)
		letter := strings.ToUpper(strings.TrimSpace(msg.Text))
		if letter == "" {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏."))
			return
		}
		handleAddChildFinish(bot, database, chatID, msg.MessageID, letter)
	}
}

func GetAddChildFSMState(chatID int64) string {
	return addChildFSM[chatID]
}

// ===== –ö–æ–ª–ª–±–µ–∫–∏ (–ï–î–ò–ù–ê–Ø —Ç–æ—á–∫–∞) =====

func HandleAddChildCallback(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	messageID := cb.Message.MessageID
	data := cb.Data
	state := GetAddChildFSMState(chatID)

	// –û—Ç–º–µ–Ω–∞
	if data == "add_child_cancel" {
		delete(addChildFSM, chatID)
		delete(addChildData, chatID)
		fsmutil.DisableMarkup(bot, chatID, messageID)
		bot.Send(tgbotapi.NewEditMessageText(chatID, messageID, "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
		return
	}
	// –ù–∞–∑–∞–¥
	if data == "add_child_back" {
		switch state {
		case StateAddChildClassNumber:
			// –Ω–∞–∑–∞–¥ –∫ –§–ò–û ‚Äî –∫–∞—Ä—Ç–æ—á–∫—É –≥–∞—Å–∏–º
			fsmutil.DisableMarkup(bot, chatID, messageID)
			bot.Send(tgbotapi.NewEditMessageText(chatID, messageID, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:\n(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)"))
			addChildFSM[chatID] = StateAddChildName
		case StateAddChildClassLetter:
			addChildFSM[chatID] = StateAddChildClassNumber
			addChildEditMenu(bot, chatID, messageID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ —Ä–µ–±—ë–Ω–∫–∞:", addChildClassNumberRows())
		case StateAddChildWaiting:
			bot.Request(tgbotapi.NewCallback(cb.ID, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."))
		default:
			bot.Request(tgbotapi.NewCallback(cb.ID, "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ."))
		}
		return
	}

	// –í—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞
	if strings.HasPrefix(data, "parent_class_num_") && (state == StateAddChildClassNumber || state == StateAddChildName) {
		numStr := strings.TrimPrefix(data, "parent_class_num_")
		num, err := strconv.Atoi(numStr)
		if err != nil || num < 1 || num > 11 {
			bot.Send(tgbotapi.NewCallback(cb.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞"))
			return
		}
		addChildData[chatID].ClassNumber = num
		addChildFSM[chatID] = StateAddChildClassLetter
		addChildEditMenu(bot, chatID, messageID, "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", addChildClassLetterRows())
		return
	}

	// –í—ã–±–æ—Ä –±—É–∫–≤—ã
	if strings.HasPrefix(data, "parent_class_letter_") && state == StateAddChildClassLetter {
		letter := strings.TrimPrefix(data, "parent_class_letter_")
		handleAddChildFinish(bot, database, chatID, messageID, letter)
		return
	}
}

// ===== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É, –∞ –Ω–µ —Å—Ä–∞–∑—É —Å–≤—è–∑—å =====

func handleAddChildFinish(bot *tgbotapi.BotAPI, database *sql.DB, chatID int64, messageID int, letter string) {
	addChildData[chatID].ClassLetter = letter
	addChildFSM[chatID] = StateAddChildWaiting

	// –ù–∞—Ö–æ–¥–∏–º —É—á–µ–Ω–∏–∫–∞
	studentID, err := FindStudentID(database, &ParentRegisterData{
		StudentName: addChildData[chatID].StudentName,
		ClassNumber: addChildData[chatID].ClassNumber,
		ClassLetter: addChildData[chatID].ClassLetter,
	})

	fmt.Println()
	log.Printf("–§–∞–π–ª add_child_fsm: %d", studentID)
	fmt.Println()

	if err != nil {
		fsmutil.DisableMarkup(bot, chatID, messageID)
		bot.Send(tgbotapi.NewEditMessageText(chatID, messageID, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–Ω–æ–≤–æ:"))
		addChildFSM[chatID] = StateAddChildName
		return
	}

	// –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º)
	reqID, err := CreateParentLinkRequest(database, chatID, studentID)
	if err != nil {
		fsmutil.DisableMarkup(bot, chatID, messageID)
		bot.Send(tgbotapi.NewEditMessageText(chatID, messageID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		delete(addChildFSM, chatID)
		delete(addChildData, chatID)
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
	handlers.NotifyAdminsAboutParentLink(bot, database, reqID)

	fsmutil.DisableMarkup(bot, chatID, messageID)
	bot.Send(tgbotapi.NewEditMessageText(chatID, messageID, "üì® –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."))
	delete(addChildFSM, chatID)
	delete(addChildData, chatID)
}

// ===== –ë–∞–∑–∞/–∑–∞—è–≤–∫–∏ =====

// CreateParentLinkRequest —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å-–∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–µ–±—ë–Ω–∫–∞.
// –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ parent_link_requests(id, parent_id, student_id, created_at) —Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º.
func CreateParentLinkRequest(database *sql.DB, parentTelegramID int64, studentID int) (int64, error) {
	// –Ω–∞—Ö–æ–¥–∏–º parent_id –ø–æ telegram_id
	var parentID int64
	err := database.QueryRow(`SELECT id FROM users WHERE telegram_id = ? AND role = 'parent' AND confirmed = 1`, parentTelegramID).Scan(&parentID)
	if err != nil {
		return 0, fmt.Errorf("—Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: %w", err)
	}

	// —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
	res, err := database.Exec(`
		INSERT INTO parent_link_requests (parent_id, student_id, created_at)
		VALUES (?, ?, CURRENT_TIMESTAMP)
	`, parentID, studentID)
	if err != nil {
		return 0, err
	}
	return res.LastInsertId()
}
