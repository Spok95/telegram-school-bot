package app

import (
	"context"
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/Spok95/telegram-school-bot/internal/observability"
)

// StartParentConsultFlow entry –∏–∑ –∫–Ω–æ–ø–∫–∏
func StartParentConsultFlow(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	u, err := db.GetUserByTelegramID(ctx, database, msg.Chat.ID)
	if err != nil || u == nil || u.Role == nil || *u.Role != models.Parent {
		_, _ = bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π."))
		return
	}
	children, err := db.ListChildrenForParent(ctx, database, u.ID)
	if err != nil {
		observability.CaptureErr(err)
		_, _ = bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–µ–π."))
		return
	}
	if len(children) == 0 {
		_, _ = bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ä–µ–±—ë–Ω–æ–∫, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é."))
		return
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, ch := range children {
		title := ch.Name
		if ch.ClassNum.Valid && ch.ClassLet.Valid {
			title = fmt.Sprintf("%s (%d%s)", ch.Name, ch.ClassNum.Int64, strings.ToUpper(ch.ClassLet.String))
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(title, fmt.Sprintf("p_pick_child:%d", ch.ID)),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "p_flow:cancel"),
	))
	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
	out := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞:")
	out.ReplyMarkup = kb
	_, _ = bot.Send(out)
}

func TryHandleParentFlowCallbacks(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) bool {
	if cb == nil || cb.Data == "" {
		return false
	}

	switch {
	case strings.HasPrefix(cb.Data, "p_flow:cancel"):
		edit := tgbotapi.NewEditMessageText(cb.Message.Chat.ID, cb.Message.MessageID, "–û—Ç–º–µ–Ω–µ–Ω–æ.")
		_, _ = bot.Send(edit)
		return true

	case strings.HasPrefix(cb.Data, "p_back:teachers"):
		// –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–±—ë–Ω–∫–∞
		msg := tgbotapi.NewMessage(cb.Message.Chat.ID, "/consult_help")
		msg.Text = "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
		StartParentConsultFlow(ctx, bot, database, &tgbotapi.Message{Chat: &tgbotapi.Chat{ID: cb.Message.Chat.ID}})
		return true

	case strings.HasPrefix(cb.Data, "p_pick_child:"):
		childID, _ := strconv.ParseInt(strings.TrimPrefix(cb.Data, "p_pick_child:"), 10, 64)
		ch, err := db.GetUserByID(ctx, database, childID)
		if err != nil || ch.ID == 0 || ch.ClassID == nil {
			_, _ = bot.Request(tgbotapi.NewCallback(cb.ID, "–£ —Ä–µ–±—ë–Ω–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–ª–∞—Å—Å"))
			return true
		}
		teachers, err := db.ListTeachersWithFutureSlotsByClass(ctx, database, *ch.ClassID, 50)
		if err != nil {
			observability.CaptureErr(err)
			_, _ = bot.Request(tgbotapi.NewCallback(cb.ID, "–û—à–∏–±–∫–∞ —É—á–∏—Ç–µ–ª–µ–π"))
			return true
		}
		if len(teachers) == 0 {
			edit := tgbotapi.NewEditMessageText(cb.Message.Chat.ID, cb.Message.MessageID, "–í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
			_, _ = bot.Send(edit)
			return true
		}
		var rows [][]tgbotapi.InlineKeyboardButton
		for _, t := range teachers {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(t.Name, fmt.Sprintf("p_pick_teacher:%d:%d", t.ID, childID)),
			))
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "p_back:teachers"),
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "p_flow:cancel"),
		))
		kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(cb.Message.Chat.ID, cb.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è:")
		edit.ReplyMarkup = &kb
		_, _ = bot.Send(edit)
		return true

	case strings.HasPrefix(cb.Data, "p_pick_teacher:"):
		parts := strings.Split(cb.Data, ":")
		if len(parts) != 3 {
			return true
		}
		teacherID, _ := strconv.ParseInt(parts[1], 10, 64)
		childID, _ := strconv.ParseInt(parts[2], 10, 64)
		ch, err := db.GetUserByID(ctx, database, childID)
		if err != nil || ch.ID == 0 || ch.ClassID == nil {
			_, _ = bot.Request(tgbotapi.NewCallback(cb.ID, "–ù–µ—Ç –∫–ª–∞—Å—Å–∞ —É —Ä–µ–±—ë–Ω–∫–∞"))
			return true
		}

		loc := time.Local
		today := time.Now().In(loc)
		var rows [][]tgbotapi.InlineKeyboardButton
		for i := 0; i < 7; i++ {
			d := today.AddDate(0, 0, i)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					d.Format("02.01 Mon"),
					fmt.Sprintf("p_pick_date:%d:%d:%s", teacherID, childID, d.Format("2006-01-02")),
				),
			))
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "p_back:teachers"),
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "p_flow:cancel"),
		))
		kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(cb.Message.Chat.ID, cb.Message.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:")
		edit.ReplyMarkup = &kb
		_, _ = bot.Send(edit)
		return true

	case strings.HasPrefix(cb.Data, "p_pick_date:"):
		parts := strings.Split(cb.Data, ":")
		if len(parts) != 4 {
			return true
		}
		teacherID, _ := strconv.ParseInt(parts[1], 10, 64)
		childID, _ := strconv.ParseInt(parts[2], 10, 64)
		day, _ := time.Parse("2006-01-02", parts[3])

		loc := time.Local
		free, err := db.ListFreeSlotsByTeacherOnDate(ctx, database, teacherID, day, loc, 50)
		if err != nil {
			observability.CaptureErr(err)
			_, _ = bot.Request(tgbotapi.NewCallback(cb.ID, "–û—à–∏–±–∫–∞ —Å–ª–æ—Ç–æ–≤"))
			return true
		}
		if len(free) == 0 {
			_, _ = bot.Request(tgbotapi.NewCallback(cb.ID, "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É"))
			return true
		}
		var rows [][]tgbotapi.InlineKeyboardButton
		for _, s := range free {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("%s‚Äì%s", s.StartAt.In(loc).Format("15:04"), s.EndAt.In(loc).Format("15:04")),
					fmt.Sprintf("p_book:%d:%d", s.ID, childID),
				),
			))
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", fmt.Sprintf("p_pick_teacher:%d:%d", teacherID, childID)),
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "p_flow:cancel"),
		))
		kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
		edit := tgbotapi.NewEditMessageText(cb.Message.Chat.ID, cb.Message.MessageID, "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:")
		edit.ReplyMarkup = &kb
		_, _ = bot.Send(edit)
		return true
	}
	return false
}
