package app

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/Spok95/telegram-school-bot/internal/db"
)

func SendConsultReminder(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, slot db.ConsultSlot, due string, loc *time.Location) error {
	if !slot.BookedByID.Valid {
		// —Å–ª–æ—Ç –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω ‚Äî —Å–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ
		return nil
	}

	// –∫–æ–≥–æ –æ–ø–æ–≤–µ—â–∞–µ–º
	parent, err := db.GetUserByID(ctx, database, slot.BookedByID.Int64)
	if err != nil {
		return err
	}
	teacher, err := db.GetUserByID(ctx, database, slot.TeacherID)
	if err != nil {
		return err
	}

	parentChat := parent.TelegramID
	teacherChat := teacher.TelegramID
	if parentChat == 0 || teacherChat == 0 {
		// —É –∫–æ–≥–æ-—Ç–æ –Ω–µ—Ç telegram_id ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–∞–ª–∏–º—Å—è (–º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ Sentry —Å –¥–µ—Ç–∞–ª—è–º–∏, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å)
		return nil
	}

	whenStart := slot.StartAt.In(loc)
	whenEnd := slot.EndAt.In(loc)

	var prefix string
	switch due {
	case "24 hours":
		prefix = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞"
	default:
		prefix = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å"
	}

	timeWindow := fmt.Sprintf("%s‚Äì%s", whenStart.Format("02.01.2006 15:04"), whenEnd.Format("15:04"))

	// –¢–µ–∫—Å—Ç—ã: –º–æ–∂–Ω–æ –æ–±–æ–≥–∞—Ç–∏—Ç—å –∏–º–µ–Ω–∞–º–∏/–∫–ª–∞—Å—Å–∞–º–∏ ‚Äî —Å–µ–π—á–∞—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ª–∏—à–Ω–∏—Ö join'–æ–≤
	textParent := fmt.Sprintf("%s: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É —É—á–∏—Ç–µ–ª—è %s.", prefix, timeWindow)
	textTeacher := fmt.Sprintf("%s: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º %s.", prefix, timeWindow)

	if _, err := tg.Send(bot, tgbotapi.NewMessage(parentChat, textParent)); err != nil {
		metrics.HandlerErrors.Inc()
	}
	if _, err := tg.Send(bot, tgbotapi.NewMessage(teacherChat, textTeacher)); err != nil {
		metrics.HandlerErrors.Inc()
	}
	return nil
}

// SendConsultBookedNotification ‚Äî –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ (–æ–±–∞ –∞–¥—Ä–µ—Å–∞—Ç–∞)
func SendConsultBookedNotification(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, slot db.ConsultSlot, loc *time.Location) error {
	if !slot.BookedByID.Valid {
		return nil
	}
	parent, err := db.GetUserByID(ctx, database, slot.BookedByID.Int64)
	if err != nil {
		return err
	}
	teacher, err := db.GetUserByID(ctx, database, slot.TeacherID)
	if err != nil {
		return err
	}
	parentChat := parent.TelegramID
	teacherChat := teacher.TelegramID
	if parentChat == 0 || teacherChat == 0 {
		// —É –∫–æ–≥–æ-—Ç–æ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Telegram ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º
		return nil
	}

	whenStart := slot.StartAt.In(loc)
	whenEnd := slot.EndAt.In(loc)
	win := fmt.Sprintf("%s‚Äì%s", whenStart.Format("02.01.2006 15:04"), whenEnd.Format("15:04"))

	textParent := fmt.Sprintf("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É —É—á–∏—Ç–µ–ª—è %s.", win)
	textTeacher := fmt.Sprintf("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º %s.", win)

	if _, err := tg.Send(bot, tgbotapi.NewMessage(parentChat, textParent)); err != nil {
		metrics.HandlerErrors.Inc()
	}
	if _, err := tg.Send(bot, tgbotapi.NewMessage(teacherChat, textTeacher)); err != nil {
		metrics.HandlerErrors.Inc()
	}
	return nil
}

// SendConsultBookedCard –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏ –±—Ä–æ–Ω–∏
func SendConsultBookedCard(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, slot db.ConsultSlot, parent models.User, child models.User, loc *time.Location) error {
	teacher, err := db.GetUserByID(ctx, database, slot.TeacherID)
	if err != nil {
		return err
	}
	class, _ := db.GetClassByID(ctx, database, slot.ClassID)

	when := fmt.Sprintf("%s ‚Äî %s",
		slot.StartAt.In(loc).Format("02.01.2006 15:04"),
		slot.EndAt.In(loc).Format("15:04"),
	)
	className := ""
	if class != nil {
		className = fmt.Sprintf("%d%s", class.Number, strings.ToUpper(class.Letter))
	}

	// —Ä–æ–¥–∏—Ç–µ–ª—é
	textParent := fmt.Sprintf(
		"üìå –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n–î–∞—Ç–∞/–≤—Ä–µ–º—è: %s\n–£—á–∏—Ç–µ–ª—å: %s\n–ö–ª–∞—Å—Å: %s",
		when, teacher.Name, className,
	)
	if parent.TelegramID != 0 {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(parent.TelegramID, textParent)); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}
	// —É—á–∏—Ç–µ–ª—é
	textTeacher := fmt.Sprintf(
		"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n–î–∞—Ç–∞/–≤—Ä–µ–º—è: %s\n–†–æ–¥–∏—Ç–µ–ª—å: %s\n–†–µ–±—ë–Ω–æ–∫: %s\n–ö–ª–∞—Å—Å: %s",
		when, parent.Name, child.Name, className,
	)
	if teacher.TelegramID != 0 {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(teacher.TelegramID, textTeacher)); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}
	return nil
}

// SendConsultCancelCards ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–± –æ—Ç–º–µ–Ω–µ: —É—á–∏—Ç–µ–ª—é –∏ —Ä–æ–¥–∏—Ç–µ–ª—é + –±—Ä–æ–¥–∫–∞—Å—Ç –ø–æ –∫–ª–∞—Å—Å—É.
func SendConsultCancelCards(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, parentID int64, slot db.ConsultSlot, loc *time.Location) error {
	// —É—á–∞—Å—Ç–Ω–∏–∫–∏
	parent, err := db.GetUserByID(ctx, database, parentID)
	if err != nil {
		return err
	}
	teacher, err := db.GetUserByID(ctx, database, slot.TeacherID)
	if err != nil {
		return err
	}
	class, err := db.GetClassByID(ctx, database, slot.ClassID)
	if err != nil {
		return err
	}

	// —Ä–µ–±—ë–Ω–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	var childName string
	if child, err := db.GetChildByParentAndClass(ctx, database, parentID, slot.ClassID); err == nil && child != nil {
		childName = child.Name
	}

	classLabel := fmt.Sprintf("%d%s", class.Number, class.Letter)
	start := slot.StartAt.In(loc).Format("02.01.2006 15:04")
	end := slot.EndAt.In(loc).Format("15:04")

	// --- —É—á–∏—Ç–µ–ª—é
	if teacher.TelegramID != 0 {
		teacherText := fmt.Sprintf(
			"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞\n%s ‚Äî %s\n—Ä–æ–¥–∏—Ç–µ–ª—å: %s\n—É—á–µ–Ω–∏–∫: %s\n–∫–ª–∞—Å—Å: %s",
			start, end, parent.Name, childName, classLabel,
		)
		if _, err := tg.Send(bot, tgbotapi.NewMessage(teacher.TelegramID, teacherText)); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}

	// --- —Ä–æ–¥–∏—Ç–µ–ª—é
	if parent.TelegramID != 0 {
		parentText := fmt.Sprintf(
			"‚ö†Ô∏è –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n–î–∞—Ç–∞/–≤—Ä–µ–º—è: %s ‚Äî %s\n–£—á–∏—Ç–µ–ª—å: %s\n–ö–ª–∞—Å—Å: %s\n–û—Ç–º–µ–Ω–µ–Ω–∞",
			start, end, teacher.Name, classLabel,
		)
		if _, err := tg.Send(bot, tgbotapi.NewMessage(parent.TelegramID, parentText)); err != nil {
			metrics.HandlerErrors.Inc()
		}
	}

	// --- —à–∏—Ä–æ–∫–æ–≤–µ—â–∞–ª–∫–∞ –ø–æ –∫–ª–∞—Å—Å—É (–æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è —Å–ª–æ—Ç)
	_ = BroadcastFreeConsultSlot(ctx, bot, database, slot, classLabel, teacher.Name, loc)

	return nil
}

// BroadcastFreeConsultSlot ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∫–ª–∞—Å—Å–∞, —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç.
func BroadcastFreeConsultSlot(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, slot db.ConsultSlot, classLabel, teacherName string, loc *time.Location) error {
	parents, err := db.ListParentsByClassID(ctx, database, slot.ClassID)
	if err != nil {
		return err
	}
	start := slot.StartAt.In(loc).Format("02.01.2006 15:04")
	end := slot.EndAt.In(loc).Format("15:04")
	text := fmt.Sprintf(
		"üîî –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n–î–∞—Ç–∞/–≤—Ä–µ–º—è: %s ‚Äî %s\n–£—á–∏—Ç–µ–ª—å: %s\n–ö–ª–∞—Å—Å: %s\n–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª.",
		start, end, teacherName, classLabel,
	)
	for _, p := range parents {
		if p.TelegramID != 0 {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(p.TelegramID, text)); err != nil {
				metrics.HandlerErrors.Inc()
			}
		}
	}
	return nil
}
