package app

import (
	"database/sql"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/Spok95/telegram-school-bot/internal/bot/auth"
	"github.com/Spok95/telegram-school-bot/internal/bot/handlers"
	"github.com/Spok95/telegram-school-bot/internal/bot/menu"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleMessage(bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	text := msg.Text
	db.EnsureAdmin(chatID, database, text, bot)
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if text == "/start" {
		user, err := db.GetUserByTelegramID(database, chatID)
		if err != nil || user == nil || user.Role == nil {
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
			roles := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–£—á–µ–Ω–∏–∫", "reg_student"),
					tgbotapi.NewInlineKeyboardButtonData("–†–æ–¥–∏—Ç–µ–ª—å", "reg_parent"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–£—á–∏—Ç–µ–ª—å", "reg_teacher"),
					tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "reg_administration"),
				),
			)
			msg.ReplyMarkup = roles
			bot.Send(msg)
			return
		}
		// üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–±–∏—Ä–∞–µ–º
		if !user.IsActive {
			rm := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
			rm.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			bot.Send(rm)
			return
		}

		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		db.SetUserFSMRole(chatID, string(*user.Role))
		keyboard := menu.GetRoleMenu(string(*user.Role))
		msg := tgbotapi.NewMessage(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	user, err := db.GetUserByTelegramID(database, chatID)
	registered := false
	if err == nil || user != nil && user.Role != nil {
		registered = true
	}

	if !registered {
		role := getUserFSMRole(chatID)
		if role != "" {
			auth.HandleFSMMessage(chatID, text, role, bot, database)
			return
		}

		bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."))
		return
	}
	// üîí –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â—ë–ª–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º ‚Äî –Ω–∏ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
	if user != nil && !user.IsActive {
		rm := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		// –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∞—Å—å —Å—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî —É–±–µ—Ä—ë–º
		rm.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		bot.Send(rm)
		return
	}
	if handlers.GetAddScoreState(chatID) != nil {
		handlers.HandleAddScoreText(bot, database, msg)
		return
	}
	if handlers.GetRemoveScoreState(chatID) != nil {
		handlers.HandleRemoveText(bot, database, msg)
		return
	}
	if handlers.GetSetPeriodState(chatID) != nil {
		handlers.HandleSetPeriodInput(bot, database, msg)
		return
	}
	if handlers.GetAuctionState(chatID) != nil {
		handlers.HandleAuctionText(bot, database, msg)
		return
	}
	if handlers.GetExportState(chatID) != nil {
		handlers.HandleExportText(bot, database, msg)
		return
	}
	if handlers.GetAdminUsersState(chatID) != nil {
		handlers.HandleAdminUsersText(bot, database, msg)
		return
	}
	if handlers.GetCatalogState(chatID) != nil {
		handlers.HandleCatalogText(bot, database, msg)
		return
	}
	if auth.GetAddChildFSMState(chatID) != "" {
		auth.HandleAddChildText(bot, database, msg)
		return
	}

	switch text {
	case "/add_score", "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã":
		go handlers.StartAddScoreFSM(bot, database, msg)
	case "/remove_score", "üìâ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
		go handlers.StartRemoveScoreFSM(bot, database, msg)
	case "/my_score", "üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥":
		go handlers.HandleMyScore(bot, database, msg)
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞":
		go auth.StartAddChild(bot, database, msg)
	case "üìä –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–±—ë–Ω–∫–∞":
		if *user.Role == models.Parent {
			go handlers.HandleParentRatingRequest(bot, database, chatID, user.ID)
		}
	case "/approvals", "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –±–∞–ª–ª—ã":
		if *user.Role == "admin" || *user.Role == "administration" {
			go handlers.ShowPendingScores(bot, database, chatID)
		}
	case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é":
		adminID, _ := strconv.ParseInt(os.Getenv("ADMIN_ID"), 10, 64)
		if chatID == adminID {
			go handlers.ShowPendingUsers(bot, database, chatID)
			go handlers.ShowPendingParentLinks(bot, database, chatID)
		}
	case "/set_period", "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥":
		if *user.Role == "admin" {
			go handlers.StartSetPeriodFSM(bot, msg)
		}
	case "/export", "üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞":
		if *user.Role == "admin" || *user.Role == "administration" {
			go handlers.StartExportFSM(bot, database, msg)
		}
	case "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
		if *user.Role == "admin" {
			go handlers.StartAdminUsersFSM(bot, msg)
		}
	case "/auction", "üéØ –ê—É–∫—Ü–∏–æ–Ω":
		go handlers.StartAuctionFSM(bot, database, msg)
	case "üóÇ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏":
		if *user.Role == "admin" {
			go handlers.StartCatalogFSM(bot, database, msg)
		}
	default:
		role := getUserFSMRole(chatID)
		if role == "" {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"))
			return
		}
		auth.HandleFSMMessage(chatID, text, role, bot, database)
	}
}

func HandleCallback(bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	data := cb.Data
	chatID := cb.Message.Chat.ID

	// üîí –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â—ë–ª–∫–∞ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –≤—Å—ë —Ä–µ–∂–µ–º
	// –±–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–æ–ª–±—ç–∫–∞.
	if cb.From != nil {
		if u, err := db.GetUserByTelegramID(database, cb.From.ID); err == nil && u != nil && !u.IsActive {
			// –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã Telegram "—Ä–∞–∑–º–æ—Ä–æ–∑–∏–ª" UI
			bot.Request(tgbotapi.NewCallback(cb.ID, "–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç"))
			// –ò –¥–∞—ë–º —è–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é)
			msg := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
			// –£–±–µ—Ä—ë–º –≤–æ–∑–º–æ–∂–Ω—É—é ¬´–∑–∞–ª–∏–ø—à—É—é¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			bot.Send(msg)
			return
		}
	}

	log.Printf("CB from %d: %s (msgID=%d)\n", cb.From.ID, cb.Data, cb.Message.MessageID)

	if strings.HasPrefix(data, "reg_") {
		role := strings.TrimPrefix(data, "reg_")
		db.SetUserFSMRole(chatID, role)
		if role == "parent" {
			auth.StartParentRegistration(chatID, cb.From, bot, database)
		} else {
			auth.StartRegistration(chatID, role, bot, database)
		}
		return
	}
	if strings.HasPrefix(data, "per_") || data == "per_confirm" {
		handlers.HandleSetPeriodCallback(bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "link_confirm_") || strings.HasPrefix(data, "link_reject_") {
		handlers.HandleParentLinkApprovalCallback(cb, bot, database, chatID)
		return
	}

	if strings.HasPrefix(data, "confirm_") ||
		strings.HasPrefix(data, "reject_") {
		handlers.HandleAdminCallback(cb, database, bot, chatID)
		return
	}

	if strings.HasPrefix(data, "score_confirm_") ||
		strings.HasPrefix(data, "score_reject_") {
		handlers.HandleScoreApprovalCallback(cb, bot, database, chatID)
		return
	}
	// Student
	if strings.HasPrefix(data, "student_class_num_") ||
		strings.HasPrefix(data, "student_class_letter_") ||
		data == "student_back" || data == "student_cancel" {
		auth.HandleStudentCallback(cb, bot, database)
		return
	}
	if auth.GetAddChildFSMState(chatID) != "" {
		// –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞ add-child
		if data == "add_child_back" || data == "add_child_cancel" ||
			strings.HasPrefix(data, "parent_class_num_") ||
			strings.HasPrefix(data, "parent_class_letter_") {
			auth.HandleAddChildCallback(bot, database, cb)
			return
		}
	}
	// Parent
	if strings.HasPrefix(data, "parent_class_num_") ||
		strings.HasPrefix(data, "parent_class_letter_") ||
		data == "parent_back" || data == "parent_cancel" {
		auth.HandleParentCallback(bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "add_score_category_") ||
		strings.HasPrefix(data, "add_score_level_") ||
		strings.HasPrefix(data, "add_class_") ||
		strings.HasPrefix(data, "add_score_") ||
		strings.HasPrefix(data, "add_score_student_") ||
		strings.HasPrefix(data, "add_confirm:") ||
		data == "add_students_done" ||
		data == "add_select_all_students" ||
		data == "add_back" ||
		data == "add_cancel" {
		handlers.HandleAddScoreCallback(bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "remove_category_") ||
		strings.HasPrefix(data, "remove_level_") ||
		strings.HasPrefix(data, "remove_class_") ||
		strings.HasPrefix(data, "remove_score_") ||
		strings.HasPrefix(data, "remove_student_") ||
		data == "remove_students_done" ||
		data == "remove_select_all_students" ||
		data == "remove_back" ||
		data == "remove_cancel" {
		handlers.HandleRemoveCallback(bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "export_type_") ||
		strings.HasPrefix(data, "export_period_") ||
		strings.HasPrefix(data, "export_mode_") ||
		strings.HasPrefix(data, "export_class_number_") ||
		strings.HasPrefix(data, "export_class_letter_") ||
		strings.HasPrefix(data, "export_select_student_") ||
		data == "export_students_done" ||
		data == "export_back" ||
		data == "export_cancel" {
		handlers.HandleExportCallback(bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "auction_mode_") ||
		strings.HasPrefix(data, "auction_class_number_") ||
		strings.HasPrefix(data, "auction_class_letter_") ||
		strings.HasPrefix(data, "auction_select_student_") ||
		data == "auction_students_done" ||
		data == "auction_back" ||
		data == "auction_cancel" {
		handlers.HandleAuctionCallback(bot, database, cb)
		return
	}
	if data == "add_another_child_yes" {
		bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞:"))
		msg := &tgbotapi.Message{Chat: &tgbotapi.Chat{ID: chatID}} // –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è FSM
		auth.StartAddChild(bot, database, msg)
		return
	}
	if data == "add_another_child_no" {
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
		msg.ReplyMarkup = menu.GetRoleMenu("parent")
		bot.Send(msg)
		return
	}
	if strings.HasPrefix(data, "show_rating_student_") {
		idStr := strings.TrimPrefix(data, "show_rating_student_")
		studentID, err := strconv.Atoi(idStr)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞."))
			return
		}
		handlers.ShowStudentRating(bot, database, chatID, int64(studentID))
		return
	}
	if strings.HasPrefix(data, "admusr_") {
		handlers.HandleAdminUsersCallback(bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "catalog_") ||
		data == "catalog_back" || data == "catalog_cancel" {
		handlers.HandleCatalogCallback(bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "exp_users_") {
		user, _ := db.GetUserByTelegramID(database, chatID)

		isAdmin := *user.Role == models.Admin || *user.Role == models.Administration
		switch data {
		case "exp_users_open":
			handlers.ClearExportState(chatID)
			// –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
			handlers.StartExportUsers(bot, database, cb.Message, isAdmin)
		case "exp_users_toggle", "exp_users_gen", "exp_users_cancel", "exp_users_back":
			// –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∞
			handlers.HandleExportUsersCallback(bot, database, cb, isAdmin)
		}
		return
	}

	bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"))
}

func getUserFSMRole(chatID int64) string {
	return db.UserFSMRole[chatID]
}
