package app

import (
	"context"
	"database/sql"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/Spok95/telegram-school-bot/internal/bot/auth"
	"github.com/Spok95/telegram-school-bot/internal/bot/handlers"
	"github.com/Spok95/telegram-school-bot/internal/bot/menu"
	"github.com/Spok95/telegram-school-bot/internal/ctxutil"
	"github.com/Spok95/telegram-school-bot/internal/db"
	"github.com/Spok95/telegram-school-bot/internal/export"
	"github.com/Spok95/telegram-school-bot/internal/metrics"
	"github.com/Spok95/telegram-school-bot/internal/models"
	"github.com/Spok95/telegram-school-bot/internal/observability"
	"github.com/Spok95/telegram-school-bot/internal/tg"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	updGuard    = NewUpdateGuard()
	chatLimiter = NewChatLimiter()
)

func HandleMessage(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	// –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	ctx = ctxutil.WithChatID(
		ctxutil.WithOp(ctx, "tg.message"),
		chatID,
	)
	text := msg.Text
	// --- —Ä–∞–Ω–Ω–∏–π –æ—Ç—Å–µ–≤ —Ñ–ª—É–¥–∞/–¥—É–±–ª–µ–π
	if !updGuard.Allow(&tgbotapi.Update{Message: msg}) {
		return
	}
	db.EnsureAdmin(ctx, chatID, database, text, bot)

	// üîÅ –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω FSM –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î ‚Äî –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —Ç—É–¥–∞ –ª—é–±–æ–π –∞–ø–¥–µ–π—Ç (—Ç–µ–∫—Å—Ç/–¥–æ–∫—É–º–µ–Ω—Ç)
	if handlers.AdminRestoreFSMActive(chatID) {
		handlers.HandleAdminRestoreMessage(ctx, bot, database, msg)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if text == "/start" {
		user, err := db.GetUserByTelegramID(ctx, database, chatID)
		if err != nil || user == nil || user.Role == nil {
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
			roles := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–£—á–µ–Ω–∏–∫", "reg_student"),
					tgbotapi.NewInlineKeyboardButtonData("–†–æ–¥–∏—Ç–µ–ª—å", "reg_parent"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–£—á–∏—Ç–µ–ª—å", "reg_teacher"),
					tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "reg_administration"),
				),
			)
			msg.ReplyMarkup = roles
			if _, err := tg.Send(bot, msg); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		// üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–±–∏—Ä–∞–µ–º
		if !user.IsActive {
			rm := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
			rm.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			if _, err := tg.Send(bot, rm); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}

		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		db.SetUserFSMRole(chatID, string(*user.Role))
		keyboard := menu.GetRoleMenu(string(*user.Role))
		msg := tgbotapi.NewMessage(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = keyboard
		if _, err := tg.Send(bot, msg); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}

	// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	user, err := db.GetUserByTelegramID(ctx, database, chatID)
	registered := false
	if err == nil && user != nil && user.Role != nil {
		registered = true
	}

	if !registered {
		role := getUserFSMRole(chatID)
		if role != "" {
			auth.HandleFSMMessage(ctx, chatID, text, role, bot, database)
			return
		}

		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	// üîí –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â—ë–ª–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º ‚Äî –Ω–∏ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
	if user != nil && !user.IsActive {
		rm := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		// –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∞—Å—å —Å—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî —É–±–µ—Ä—ë–º
		rm.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		if _, err := tg.Send(bot, rm); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	if handlers.GetAddScoreState(chatID) != nil {
		handlers.HandleAddScoreText(ctx, bot, msg)
		return
	}
	if handlers.GetRemoveScoreState(chatID) != nil {
		handlers.HandleRemoveText(ctx, bot, database, msg)
		return
	}
	if handlers.GetSetPeriodState(chatID) != nil {
		handlers.HandleSetPeriodInput(ctx, bot, msg)
		return
	}
	if handlers.GetAuctionState(chatID) != nil {
		handlers.HandleAuctionText(ctx, bot, database, msg)
		return
	}
	if handlers.GetExportState(chatID) != nil {
		handlers.HandleExportText(ctx, bot, database, msg)
		return
	}
	if handlers.GetAdminUsersState(chatID) != nil {
		handlers.HandleAdminUsersText(ctx, bot, database, msg)
		return
	}
	if handlers.GetCatalogState(chatID) != nil {
		handlers.HandleCatalogText(ctx, bot, database, msg)
		return
	}
	if auth.GetAddChildFSMState(chatID) != "" {
		auth.HandleAddChildText(ctx, bot, database, msg)
		return
	}
	if TryHandleTeacherAddSlots(ctx, bot, database, msg) {
		return
	}
	if TryHandleParentCommands(ctx, bot, database, msg) {
		return
	}
	// –£—á–∏—Ç–µ–ª—å—Å–∫–∏–π FSM /t_slots
	if TryHandleTeacherSlotsCommand(ctx, bot, database, msg) {
		return
	}
	if TryHandleTeacherSlotsText(ctx, bot, database, msg) {
		return
	}
	// –†–æ–¥–∏—Ç–µ–ª—å: —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
	if TryHandleParentSlotsCommand(ctx, bot, database, msg) {
		return
	}
	// –£—á–∏—Ç–µ–ª—å: —Å–ø–∏—Å–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏
	if TryHandleTeacherMySlots(ctx, bot, database, msg) {
		return
	}

	switch text {
	case "/add_score", "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã":
		unlock := chatLimiter.lock(chatID)
		defer unlock()
		handlers.StartAddScoreFSM(ctx, bot, database, msg)
	case "/remove_score", "üìâ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
		unlock := chatLimiter.lock(chatID)
		defer unlock()
		handlers.StartRemoveScoreFSM(ctx, bot, database, msg)
	case "/my_score", "üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥":
		handlers.HandleMyScore(ctx, bot, database, msg)
	case "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤":
		if user.Role != nil {
			switch *user.Role {
			case models.Student:
				handlers.StartStudentHistoryExcel(ctx, bot, database, msg)
			case models.Parent:
				handlers.StartParentHistoryExcel(ctx, bot, database, msg)
			default:
				if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.")); err != nil {
					metrics.HandlerErrors.Inc()
				}
			}
		}
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞":
		auth.StartAddChild(ctx, bot, msg)
	case "üìä –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–±—ë–Ω–∫–∞":
		if *user.Role == models.Parent {
			handlers.HandleParentRatingRequest(ctx, bot, database, chatID, user.ID)
		}
	case "/approvals", "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –±–∞–ª–ª—ã":
		if *user.Role == "admin" || *user.Role == "administration" {
			handlers.ShowPendingScores(ctx, bot, database, chatID)
		}
	case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é":
		if db.IsAdminID(chatID) {
			handlers.ShowPendingUsers(ctx, bot, database, chatID)
			handlers.ShowPendingParentLinks(ctx, bot, database, chatID)
		}
	case "/periods", "üìÖ –ü–µ—Ä–∏–æ–¥—ã":
		if *user.Role == "admin" {
			handlers.StartAdminPeriods(ctx, bot, database, msg)
		}
	case "/export", "üì• –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞":
		if *user.Role == "admin" || *user.Role == "administration" {
			unlock := chatLimiter.lock(chatID)
			bg, cancel := context.WithTimeout(context.WithoutCancel(ctx), 2*time.Minute)
			go func(c context.Context) {
				defer unlock()
				defer cancel()
				handlers.StartExportFSM(c, bot, database, msg)
			}(bg)
		}
	case "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
		if *user.Role == "admin" {
			handlers.StartAdminUsersFSM(ctx, bot, msg)
		}
	case "/auction", "üéØ –ê—É–∫—Ü–∏–æ–Ω":
		if *user.Role == "admin" || *user.Role == "administration" {
			handlers.StartAuctionFSM(ctx, bot, database, msg)
		}
	case "üóÇ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏":
		if *user.Role == "admin" {
			handlers.StartCatalogFSM(ctx, bot, database, msg)
		}
	case "/backup", "üíæ –ë—ç–∫–∞–ø –ë–î":
		if user.Role != nil && (*user.Role == "admin") {
			unlock := chatLimiter.lock(chatID)
			bg, cancel := context.WithTimeout(context.WithoutCancel(ctx), 2*time.Minute)
			go func(c context.Context) {
				defer unlock()
				defer cancel()
				handlers.HandleAdminBackup(c, bot, database, chatID)
			}(bg)
		}
	case "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î":
		if user.Role != nil && (*user.Role == "admin") {
			unlock := chatLimiter.lock(chatID)
			bg, cancel := context.WithTimeout(context.WithoutCancel(ctx), 2*time.Minute)
			go func(c context.Context) {
				defer unlock()
				defer cancel()
				handlers.HandleAdminRestoreLatest(c, bot, database, chatID)
			}(bg)
		}
	case "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞":
		if user.Role != nil && (*user.Role == "admin") {
			unlock := chatLimiter.lock(chatID)
			bg, cancel := context.WithTimeout(context.WithoutCancel(ctx), 2*time.Minute)
			go func(c context.Context) {
				defer unlock()
				defer cancel()
				handlers.HandleAdminRestoreStart(c, bot, database, chatID)
			}(bg)
		}
	case "/consult_help":
		reply(bot, chatID, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n"+
			"‚Ä¢ –£—á–∏—Ç–µ–ª—å: /t_slots ‚Äî –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏.\n"+
			"‚Ä¢ –£—á–∏—Ç–µ–ª—å: /t_addslots <–¥–µ–Ω—å> <HH:MM-HH:MM> <—à–∞–≥-–º–∏–Ω> <class_id>\n"+
			"‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å: /p_slots <teacher_id> <YYYY-MM-DD> ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏.\n"+
			"‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å: /p_free <teacher_id> <YYYY-MM-DD> ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —Å–ø–∏—Å–∫–æ–º.\n"+
			"‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å: /p_book <slot_id> ‚Äî –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID.")
		return
	case "üóì –°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç—ã":
		// –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä
		if user.Role != nil && *user.Role == models.Teacher {
			// —ç–º—É–ª–∏—Ä—É–µ–º /t_slots
			msg := *msg
			msg.Text = "/t_slots"
			if TryHandleTeacherSlotsCommand(ctx, bot, database, &msg) {
				return
			}
		}
	case "üìã –ú–æ–∏ —Å–ª–æ—Ç—ã":
		if user.Role != nil && *user.Role == models.Teacher {
			// —ç–º—É–ª–∏—Ä—É–µ–º /t_myslots
			msg := *msg
			msg.Text = "/t_myslots"
			if TryHandleTeacherMySlots(ctx, bot, database, &msg) {
				return
			}
		}
	case "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
		if user.Role != nil && *user.Role == models.Parent {
			// —Å—Ç–∞—Ä—Ç—É–µ–º parent-—Ñ–ª–æ—É –≤—ã–±–æ—Ä–∞ —É—á–∏—Ç–µ–ª—è/–¥–∞—Ç—ã
			StartParentConsultFlow(ctx, bot, database, msg)
			return
		}
	case "üìò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π":
		if user.Role != nil && *user.Role == models.Teacher {
			loc := time.Local
			now := time.Now().In(loc)
			from := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, loc)
			to := from.AddDate(0, 0, 7)
			go func() {
				if err := export.ExportConsultationsExcel(ctx, bot, database, user.ID, from, to, loc, chatID); err != nil {
					observability.CaptureErr(err)
					_, _ = tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç."))
				}
			}()
		}
		return

	default:
		role := getUserFSMRole(chatID)
		if _, ok := handlers.PeriodsFSMActive(chatID); ok && user.Role != nil && (*user.Role == "admin") {
			handlers.HandleAdminPeriodsText(ctx, bot, msg)
			return
		}
		if role == "" {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		auth.HandleFSMMessage(ctx, chatID, text, role, bot, database)
	}
}

func HandleCallback(ctx context.Context, bot *tgbotapi.BotAPI, database *sql.DB, cb *tgbotapi.CallbackQuery) {
	data := cb.Data
	chatID := cb.Message.Chat.ID

	// --- —Ä–∞–Ω–Ω–∏–π –æ—Ç—Å–µ–≤ —Ñ–ª—É–¥–∞/–¥—É–±–ª–µ–π
	if !updGuard.Allow(&tgbotapi.Update{CallbackQuery: cb}) {
		// –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ACK, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∏ ¬´—á–∞—Å–∏–∫–∏¬ª –¥–∞–∂–µ –µ—Å–ª–∏ –¥—Ä–æ–ø–Ω—É–ª–∏
		_, _ = tg.Request(bot, tgbotapi.NewCallback(cb.ID, ""))
		return
	}

	// –æ–±—ã—á–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π ACK –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
	if _, err := tg.Request(bot, tgbotapi.NewCallback(cb.ID, "")); err != nil {
		metrics.HandlerErrors.Inc()
	}

	ctx = ctxutil.WithChatID(
		ctxutil.WithOp(ctx, "tg.callback:"+cb.Data),
		chatID,
	)

	// üîí –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â—ë–ª–∫–∞ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –≤—Å—ë —Ä–µ–∂–µ–º
	// –±–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–æ–ª–±—ç–∫–∞.
	if cb.From != nil {
		if u, err := db.GetUserByTelegramID(ctx, database, cb.From.ID); err == nil && u != nil && !u.IsActive {
			// –ò –¥–∞—ë–º —è–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é)
			msg := tgbotapi.NewMessage(chatID, "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
			// –£–±–µ—Ä—ë–º –≤–æ–∑–º–æ–∂–Ω—É—é ¬´–∑–∞–ª–∏–ø—à—É—é¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			if _, err := tg.Send(bot, msg); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
	}

	log.Printf("CB from %d: %s (msgID=%d)\n", cb.From.ID, cb.Data, cb.Message.MessageID)

	if strings.HasPrefix(data, "reg_") {
		role := strings.TrimPrefix(data, "reg_")
		db.SetUserFSMRole(chatID, role)
		if role == "parent" {
			auth.StartParentRegistration(ctx, chatID, cb.From, bot)
		} else {
			auth.StartRegistration(ctx, chatID, role, bot)
		}
		return
	}

	// –£—á–∏—Ç–µ–ª—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ (—É–¥–∞–ª–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å)
	if TryHandleTeacherManageCallback(ctx, bot, database, cb) {
		return
	}
	// –£—á–∏—Ç–µ–ª—å—Å–∫–∏–π FSM /t_slots (–∫–Ω–æ–ø–∫–∏)
	if TryHandleTeacherSlotsCallback(ctx, bot, database, cb) {
		return
	}
	// –†–æ–¥–∏—Ç–µ–ª—å: –∫–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	if TryHandleParentBookCallback(ctx, bot, database, cb) {
		return
	}
	if TryHandleParentFlowCallbacks(ctx, bot, database, cb) {
		return
	}

	if handlers.AdminRestoreFSMActive(chatID) && (data == "restore_cancel") {
		handlers.HandleAdminRestoreCallback(ctx, bot, cb)
		return
	}

	if strings.HasPrefix(data, "per_") || data == "per_confirm" {
		handlers.HandleSetPeriodCallback(ctx, bot, database, cb)
		return
	}

	if strings.HasPrefix(data, "link_confirm_") || strings.HasPrefix(data, "link_reject_") {
		handlers.HandleParentLinkApprovalCallback(ctx, cb, bot, database)
		return
	}

	if strings.HasPrefix(data, "confirm_") ||
		strings.HasPrefix(data, "reject_") {
		handlers.HandleAdminCallback(ctx, cb, database, bot, chatID)
		return
	}

	if strings.HasPrefix(data, "score_confirm_") ||
		strings.HasPrefix(data, "score_reject_") {
		handlers.HandleScoreApprovalCallback(ctx, cb, bot, database, chatID)
		return
	}
	// Student
	if strings.HasPrefix(data, "student_class_num_") ||
		strings.HasPrefix(data, "student_class_letter_") ||
		data == "student_back" || data == "student_cancel" {
		auth.HandleStudentCallback(ctx, cb, bot, database)
		return
	}
	if auth.GetAddChildFSMState(chatID) != "" {
		// –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞ add-child
		if data == "add_child_back" || data == "add_child_cancel" ||
			strings.HasPrefix(data, "parent_class_num_") ||
			strings.HasPrefix(data, "parent_class_letter_") {
			auth.HandleAddChildCallback(ctx, bot, database, cb)
			return
		}
	}
	// Parent
	if strings.HasPrefix(data, "parent_class_num_") ||
		strings.HasPrefix(data, "parent_class_letter_") ||
		data == "parent_back" || data == "parent_cancel" {
		auth.HandleParentCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "add_score_category_") ||
		strings.HasPrefix(data, "add_score_level_") ||
		strings.HasPrefix(data, "add_class_") ||
		strings.HasPrefix(data, "add_score_") ||
		strings.HasPrefix(data, "add_score_student_") ||
		strings.HasPrefix(data, "add_confirm:") ||
		data == "add_students_done" ||
		data == "add_select_all_students" ||
		data == "add_back" ||
		data == "add_cancel" {
		handlers.HandleAddScoreCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "remove_category_") ||
		strings.HasPrefix(data, "remove_level_") ||
		strings.HasPrefix(data, "remove_class_") ||
		strings.HasPrefix(data, "remove_score_") ||
		strings.HasPrefix(data, "remove_student_") ||
		data == "remove_students_done" ||
		data == "remove_select_all_students" ||
		data == "remove_back" ||
		data == "remove_cancel" {
		handlers.HandleRemoveCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "export_type_") ||
		strings.HasPrefix(data, "export_period_") ||
		strings.HasPrefix(data, "export_mode_") ||
		strings.HasPrefix(data, "export_class_number_") ||
		strings.HasPrefix(data, "export_class_letter_") ||
		strings.HasPrefix(data, "export_select_student_") ||
		strings.HasPrefix(data, "export_schoolyear_") ||
		data == "export_students_done" ||
		data == "export_back" ||
		data == "export_cancel" {
		handlers.HandleExportCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "auction_mode_") ||
		strings.HasPrefix(data, "auction_class_number_") ||
		strings.HasPrefix(data, "auction_class_letter_") ||
		strings.HasPrefix(data, "auction_select_student_") ||
		data == "auction_students_done" ||
		data == "auction_back" ||
		data == "auction_cancel" {
		handlers.HandleAuctionCallback(ctx, bot, database, cb)
		return
	}
	if data == "add_another_child_yes" {
		if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞:")); err != nil {
			metrics.HandlerErrors.Inc()
		}
		msg := &tgbotapi.Message{Chat: &tgbotapi.Chat{ID: chatID}} // –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è FSM
		auth.StartAddChild(ctx, bot, msg)
		return
	}
	if data == "add_another_child_no" {
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
		msg.ReplyMarkup = menu.GetRoleMenu("parent")
		if _, err := tg.Send(bot, msg); err != nil {
			metrics.HandlerErrors.Inc()
		}
		return
	}
	if strings.HasPrefix(data, "show_rating_student_") {
		idStr := strings.TrimPrefix(data, "show_rating_student_")
		studentID, err := strconv.Atoi(idStr)
		if err != nil {
			if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞.")); err != nil {
				metrics.HandlerErrors.Inc()
			}
			return
		}
		handlers.ShowStudentRating(ctx, bot, database, chatID, int64(studentID))
		return
	}
	if strings.HasPrefix(data, "hist_excel_student_") {
		handlers.HandleHistoryExcelCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "admusr_") {
		handlers.HandleAdminUsersCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "catalog_") ||
		data == "catalog_back" || data == "catalog_cancel" {
		handlers.HandleCatalogCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "exp_users_") {
		user, _ := db.GetUserByTelegramID(ctx, database, chatID)

		isAdmin := *user.Role == models.Admin || *user.Role == models.Administration
		switch data {
		case "exp_users_open":
			handlers.ClearExportState(chatID)
			// –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
			handlers.StartExportUsers(ctx, bot, database, cb.Message, isAdmin)
		case "exp_users_toggle", "exp_users_gen", "exp_users_cancel", "exp_users_back":
			// –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç–∫—Ä–∞–Ω–∞
			handlers.HandleExportUsersCallback(ctx, bot, database, cb, isAdmin)
		}
		return
	}
	// –ü–µ—Ä–∏–æ–¥—ã (–∞–¥–º–∏–Ω): —Å–ø–∏—Å–æ–∫ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	if data == "peradm_edit_end" || data == "peradm_edit_both" || data == "peradm_save" {
		handlers.HandleAdminPeriodsEditCallback(ctx, bot, database, cb)
		return
	}
	if strings.HasPrefix(data, "peradm_") {
		handlers.HandleAdminPeriodsCallback(ctx, bot, database, cb)
		return
	}

	if _, err := tg.Send(bot, tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")); err != nil {
		metrics.HandlerErrors.Inc()
	}
}

func getUserFSMRole(chatID int64) string {
	return db.UserFSMRole[chatID]
}
